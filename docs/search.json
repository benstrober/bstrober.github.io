[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/Third and Six/index.html",
    "href": "posts/Third and Six/index.html",
    "title": "Maryland’s infamous 3rd and 6 run: Was it really that strange?",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(dplyr)\nlibrary(cfbfastR)\nlibrary(waffle)\n\n\n\n\nCode\npbp &lt;-load_cfb_pbp(seasons = c(2019,2020,2021,2022,2023,2024))\n\n\n\n\nCode\nthird_and_six &lt;- pbp |&gt;\n  filter(down == 3, distance ==6)\n\n\n\n\nCode\nthird_and_six|&gt;\n  group_by(play_type)|&gt;\n  summarise(count = n()) \n\n\n# A tibble: 22 × 2\n   play_type                            count\n   &lt;chr&gt;                                &lt;int&gt;\n 1 Blocked Field Goal                       2\n 2 End Period                               6\n 3 End of Game                              1\n 4 Field Goal Good                         16\n 5 Field Goal Missed                        6\n 6 Fumble Recovery (Opponent)             101\n 7 Fumble Recovery (Opponent) Touchdown     1\n 8 Fumble Recovery (Own)                   76\n 9 Fumble Return Touchdown                  7\n10 Interception Return                    257\n# ℹ 12 more rows\n\n\n\n\nCode\nthird_and_six_runs &lt;- third_and_six |&gt;\n  filter(rush ==\"1\")\n\ntotal_runs &lt;- third_and_six_runs |&gt;\nsummarise(count = n()) |&gt;\n  pluck(1)\ntotal_runs/15661\n\n\n[1] 0.2163974\n\n\nTeams ran the ball about 21.6% of the time on 3rd down and 6.\n\n\nCode\nthird_and_six |&gt;\n  summarise(\n    average_yds = mean(yards_gained)\n  )\n\n\n# A tibble: 1 × 1\n  average_yds\n        &lt;dbl&gt;\n1        5.20\n\n\nTeams who ran the ball on 3rd down and 6 picked up on average 5.19 yards. Let’s hope they were in two-down territory.\n\n\nCode\nrun_counts &lt;- third_and_six_runs |&gt;\n  group_by(pos_team) |&gt;\n  summarise(total_runs = n()) |&gt;\n  arrange(desc(total_runs)) \n\n\nNavy runs the most on third and 6, which isn’t a surprise, as they’ve done it 60 times.\n\n\nCode\nthird_and_six |&gt; group_by(pos_team, year)|&gt; filter(rush == \"1\", pos_team ==\"Maryland\") |&gt;\nsummarise(\n  count = n())\n\n\n`summarise()` has grouped output by 'pos_team'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 5 × 3\n# Groups:   pos_team [1]\n  pos_team  year count\n  &lt;chr&gt;    &lt;int&gt; &lt;int&gt;\n1 Maryland  2019     1\n2 Maryland  2021     4\n3 Maryland  2022     6\n4 Maryland  2023     5\n5 Maryland  2024     1\n\n\nIn 2023, which had the infamous call on Homecoming, Maryland ran the ball on third and 6 five times. In 2024, they have only done so one time.Let’s take a visual look compare this data to an SEC team like Ole Miss.\n\n\nCode\nmd &lt;- c(\"Rush\"=17, \"Pass\"=46)\nom &lt;- c(\"Rush\"=31, \"Pass\"=55)\n\n\n\n\nCode\nthird_and_six |&gt; group_by(pos_team, year)|&gt; filter(rush == \"1\", pos_team ==\"Ole Miss\") |&gt;\nsummarise(\n  count = n())\n\n\n`summarise()` has grouped output by 'pos_team'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 6 × 3\n# Groups:   pos_team [1]\n  pos_team  year count\n  &lt;chr&gt;    &lt;int&gt; &lt;int&gt;\n1 Ole Miss  2019     6\n2 Ole Miss  2020     4\n3 Ole Miss  2021     6\n4 Ole Miss  2022     4\n5 Ole Miss  2023     8\n6 Ole Miss  2024     3\n\n\n\n\nCode\nthird_and_six |&gt; group_by(pos_team, year)|&gt; filter(pass == \"1\", pos_team ==\"Ole Miss\") |&gt;\nsummarise(\n  count = n())\n\n\n`summarise()` has grouped output by 'pos_team'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 6 × 3\n# Groups:   pos_team [1]\n  pos_team  year count\n  &lt;chr&gt;    &lt;int&gt; &lt;int&gt;\n1 Ole Miss  2019    12\n2 Ole Miss  2020     7\n3 Ole Miss  2021     7\n4 Ole Miss  2022     6\n5 Ole Miss  2023    12\n6 Ole Miss  2024    11\n\n\n\n\nCode\nthird_and_six |&gt; group_by(pos_team, year)|&gt; filter(pass == \"1\", pos_team ==\"Maryland\") |&gt;\nsummarise(\n  count = n())\n\n\n`summarise()` has grouped output by 'pos_team'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 6 × 3\n# Groups:   pos_team [1]\n  pos_team  year count\n  &lt;chr&gt;    &lt;int&gt; &lt;int&gt;\n1 Maryland  2019     4\n2 Maryland  2020    11\n3 Maryland  2021     6\n4 Maryland  2022    12\n5 Maryland  2023     7\n6 Maryland  2024     6\n\n\n\n\nCode\nwaffle(\n        md, \n        rows = 10, \n        title=\"Maryland on third and six\", \n        xlab=\"1 square = 1 yard\", \n        colors = c(\"black\", \"red\")\n)\n\n\n\n\n\n\n\n\n\nAs shown, Maryland over the past few years typically doesn’t run the ball on third and six. This seems about right, but last year featured the team do it the second most in the past 5 years, with 2022 seeing the rush called the most.\nLet’s take a look at Ole Miss compared to Maryland.\n\n\nCode\niron(\n waffle(md/2, \n        rows = 10, \n        title=\"Maryland 3rd and 6\", \n        xlab=\"1 square = 1 yard\", \n        colors = c(\"black\", \"red\")\n        ),\n waffle(om/2, \n        rows = 10, \n        title=\"Ole Miss 3rd and 6\", \n        xlab=\"1 square = 1 yard\",\n        colors = c(\"blue\", \"grey\")\n        )\n)\n\n\n\n\n\n\n\n\n\nIt was very obvious Navy, Army and Air Force would top the list of teams that run the ball on third down and six. For that reason, we didn’t include them in a visualization. When looking through teams that ran the ball on third and six the most, it was slightly surprising to see Ole Miss so high up on the list. When taking a look at the waffle, it’s evident Ole Miss has been much more run-heavy on this down and distance compared to Maryland. Ole Miss ran 31 times, compared to Maryland’s 17. Maryland has only done so once this year, which is interesting considering they have a QB that is probably a stronger runner than Taulia was. Ole Miss’ offense also features quite a bit of QB runs, so maybe that’s what inflates these 3rd and medium running plays.\nPeople were furious with Locksley after that play-call. However, this data suggest it’s not entirely weird. Of course, play-calling should be dependent on the team’s offensive scheme and personel, but seeing a team as good as Ole Miss do it this often signifies it works for some. Based on this year so far, Maryland has changed its behavior and only ran 1 time in this situation.\nWhen sifting through all the teams that are pretty high up, there is a lot of good teams that actually run the ball a lot on third and six, revealing that this play-call isn’t as absurd as people reacted."
  },
  {
    "objectID": "posts/Football/index.html",
    "href": "posts/Football/index.html",
    "title": "Defensive Regression Haults Maryland football’s Progression",
    "section": "",
    "text": "Maryland football has had a rocky 2024 season. Although it’s not over yet, an improvement from back-to-back 8 win seasons looks out of the question.\nDefense has been the problem. Read more to find out what exactly that entails.\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(ggrepel)\n\n\n\n\nCode\nlogs &lt;- read_csv(\"https://thescoop.org/sports-data-files/footballlogs1124.csv\")\n\n\nRows: 21592 Columns: 55\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (46): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nCode\nwinlosslogs &lt;- logs |&gt; \n  mutate(\n    wins = case_when(\n      grepl(\"W\", Outcome) ~ 1, \n      grepl(\"L\", Outcome) ~ 0)\n)\n\n\n\n\nCode\nwinlosslogs |&gt; \n  filter(Team == \"Maryland\")|&gt;\n  group_by(Season) |&gt; \n   summarise(\n    TotalPlays = sum(OffensivePlays), \n    TotalYards = sum(OffensiveYards), \n    DefensivePlays = sum(DefPlays), \n    DefensiveYards = sum(DefYards), \n    TotalWins = sum(wins)) |&gt; \n  mutate(\n    OffensiveYPP = TotalYards/TotalPlays, \n    DefensiveYPP = DefensiveYards/DefensivePlays) -&gt; ypp\n\n\nThis reveals the average YPP offensively and defensively since 2011. As revealed in the data, Maryland played its best defense in the 13 year span during 2023.\n\n\nCode\nggplot() + \n  geom_point(\n    data=ypp, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins),\n    alpha = .3) + \n  scale_size(range = c(3, 8), name=\"Wins\")\n\n\n\n\n\n\n\n\n\n\n\nCode\nypp |&gt; \n  ungroup() |&gt; \n  summarise(\n    offense = mean(OffensiveYPP), \n    defense = mean(DefensiveYPP)\n    )\n\n\n# A tibble: 1 × 2\n  offense defense\n    &lt;dbl&gt;   &lt;dbl&gt;\n1    5.62    5.45\n\n\nOffensively, Maryland’s overall outputs have been slightly better than defense. However, Maryland’s best seasons have come when the defense performed as well as just under 5 yards per play.\n\n\nCode\nggplot() + \n  geom_point(\n    data=ypp, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"red\")+\n    geom_vline(xintercept = 5.617601) + \n  geom_hline(yintercept = 5.45072) +\n geom_text_repel(\n    data=ypp, \n    aes(x=OffensiveYPP, y=DefensiveYPP, label=Season) )+\n  \n  labs(title=\"Maryland's Defense has prevented the program from taking the next step.\", caption=\"Source: NCAA | By Ben Strober\")  + theme_minimal() + \n  theme(\n    plot.title = element_text(size = 12, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    )\n\n\n\n\n\n\n\n\n\nAfter 2023’s eight win season, a replication of that appears unlikely for Maryland football. Despite similar offensive outputs to last year’ season, Maryland football’s defense has taken a massive step back.\nIn 2023, Maryland allowed under 5 yards per play, according to NCAA. However, in 2024, Maryland’s defense is allowing over 5.5.\n2023’s defensive numbers was the lowest since 2011, and only the 2nd time the program held opponents under 5 yards per play in that span.\nIn 4 of the 5 years Maryland won at least 7 games, the defense held opponents under 5.5 yards per play on average, according to the data.\nMaryland still has 5 games to play and a chance to reach a fourth-straight bowl, but with No. 1 Oregon and Penn State on the schedule, its defensive number suggest they will struggle against these teams."
  },
  {
    "objectID": "posts/close-rushing-wins/rushing.html",
    "href": "posts/close-rushing-wins/rushing.html",
    "title": "Michigan’s Big Ten Title win is one of the Strangest Blowouts you’ll ever see",
    "section": "",
    "text": "Maryland football somehow won on Saturday despite only 56 rushing yards. How often does this happen? Is this remotely close to a sustainable way to win games? Spoiler alert, it’s not.\nA phenomenal program such as Michigan will tell you this isn’t a sustainable method. However, Michigan’s 2023 undefeated title run has an incredible anomaly to look at.\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(ggplot2)\n\n\n\n\nCode\nLogs &lt;- read.csv(\"https://dwillis.github.io/sports-data-files/footballlogs1124.csv\")\n\n\n\n\nCode\nwinlosslogs &lt;- Logs |&gt;\n  mutate(\n    wins = case_when(\n      grepl(\"W\", Outcome) ~ 1,  \n      grepl(\"L\", Outcome) ~ 0   \n    )\n  )\n  \nhead(winlosslogs)\n\n\n  Game       Date HomeAway  Opponent    Result PassingCmp PassingAtt PassingPct\n1    1 2011-09-03     &lt;NA&gt; Louisiana W (61-34)         28         43       65.1\n2    2 2011-09-08     &lt;NA&gt;   Arizona W (37-14)         42         53       79.2\n3    3 2011-09-17        @     Tulsa W (59-33)         29         40       72.5\n4    4 2011-09-24        @ Texas A&M W (30-29)         47         60       78.3\n5    5 2011-10-08     &lt;NA&gt;    Kansas W (70-28)         38         49       77.6\n6    6 2011-10-15        @     Texas W (38-26)         23         41       56.1\n  PassingYds PassingTD RushingAtt RushingYds RushingAvg RushingTD\n1        458         4         44        208        4.7         3\n2        397         2         31        197        6.4         3\n3        369         3         48        174        3.6         4\n4        438         2         35         46        1.3         1\n5        494         7         27        106        3.9         3\n6        218         1         27        202        7.5         3\n  OffensivePlays OffensiveYards OffenseAvg FirstDownPass FirstDownRush\n1             87            666        7.7            21            10\n2             84            594        7.1            17             8\n3             88            543        6.2            18            13\n4             95            484        5.1            22             8\n5             76            600        7.9            19             6\n6             68            420        6.2            12             8\n  FirstDownPen FirstDownTotal Penalties PenaltyYds Fumbles Interceptions\n1            0             31         7         80       0             3\n2            0             25        10         90       0             1\n3            1             32         5         50       0             2\n4            3             33        11         95       1             0\n5            2             27         5         35       0             0\n6            1             21         2         20       1             0\n  TotalTurnovers               TeamFull                               TeamURL\n1              3 Oklahoma State Cowboys /cfb/schools/oklahoma-state/2011.html\n2              1 Oklahoma State Cowboys /cfb/schools/oklahoma-state/2011.html\n3              2 Oklahoma State Cowboys /cfb/schools/oklahoma-state/2011.html\n4              1 Oklahoma State Cowboys /cfb/schools/oklahoma-state/2011.html\n5              0 Oklahoma State Cowboys /cfb/schools/oklahoma-state/2011.html\n6              1 Oklahoma State Cowboys /cfb/schools/oklahoma-state/2011.html\n  Outcome TeamScore OpponentScore DefPassingCmp DefPassingAtt DefPassingPct\n1       W        61            34            20            37          54.1\n2       W        37            14            37            51          72.5\n3       W        59            33             8            26          30.8\n4       W        30            29            28            47          59.6\n5       W        70            28            26            37          70.3\n6       W        38            26            22            40          55.0\n  DefPassingYds DefPassingTD DefRushingAtt DefRushingYds DefRushingAvg\n1           212            0            37           108           2.9\n2           398            1            21            41           2.0\n3           117            2            59           365           6.2\n4           309            2            27           162           6.0\n5           325            2            44           153           3.5\n6           139            0            49           231           4.7\n  DefRushingTD DefPlays DefYards DefAvg DefFirstDownPass DefFirstDownRush\n1            2       74      320    4.3               10                6\n2            1       72      439    6.1               19                2\n3            2       85      482    5.7                5               21\n4            1       74      471    6.4               17                7\n5            2       81      478    5.9               15                9\n6            2       89      370    4.2                9               14\n  DefFirstDownPen DefFirstDownTotal DefPenalties DefPenaltyYds DefFumbles\n1               3                19            7            42          1\n2               0                21           11            67          1\n3               1                27            3            25          2\n4               1                25           10            82          1\n5               0                24            5            25          2\n6               1                24            3            30          1\n  DefInterceptions DefTotalTurnovers           Team        Conference Season\n1                1                 2 Oklahoma State Big 12 Conference   2011\n2                0                 1 Oklahoma State Big 12 Conference   2011\n3                4                 6 Oklahoma State Big 12 Conference   2011\n4                3                 4 Oklahoma State Big 12 Conference   2011\n5                2                 4 Oklahoma State Big 12 Conference   2011\n6                2                 3 Oklahoma State Big 12 Conference   2011\n  wins\n1    1\n2    1\n3    1\n4    1\n5    1\n6    1\n\n\n\n\nCode\nBigTenRush &lt;- winlosslogs |&gt; filter(Conference == \"Big Ten Conference\")\n\n\n\n\nCode\nmichigan &lt;- BigTenRush  |&gt; group_by(Season)|&gt; filter(TeamFull == \"Michigan Wolverines\", RushingYds &lt;100)|&gt;\n  summarise(\n    TotalGames = n(),\n    TotalWins = sum(wins),\n    TotalLosses = TotalGames - TotalWins,\n    winpct = TotalWins/TotalGames,\n    PassYPG = sum(PassingYds)/TotalGames\n    \n  )\n\n\n\n\nCode\nggplot(michigan, aes(x = Season)) +\n  geom_line(aes(y = TotalWins, color = \"Total Wins\"), size = 1.2) +  # Line for wins\n  geom_line(aes(y = TotalLosses, color = \"Total Losses\"), size = 1.2) +  # Line for losses\n  geom_point(data = subset(michigan, Season == 2023), aes(y = TotalWins), color = \"blue\", size = 4) + # Highlight 2023 wins\n  geom_point(data = subset(michigan, Season == 2023), aes(y = TotalLosses), color = \"red\", size = 4) + # Highlight 2023 losses\n  scale_color_manual(values = c(\"Total Wins\" = \"green\", \"Total Losses\" = \"orange\")) +\n  scale_x_continuous(breaks = seq(2011, 2024, 1)) +  # Ensure each year from 2013 to 2024 is labeled\n  labs(\n    title = \"Michigan Wolverines under 100 Rsh Yd 2011-2024\",\n    subtitle = \"Seasons: 2013-2024 (Highlight on 2023)\",\n    x = \"Season\",\n    y = \"Wins\",\n    color = \"Legend\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0.5),\n    plot.subtitle = element_text(hjust = 0.5)\n  )\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n\nPretty simple to see that since 2011, Michigan has not won often when its rushed for under 100 yards. The record to be exact in that span is 6-25.\n2023 is crazy in this data. In the one game they had under 100 rushing yards, they only threw for 147 yards that game. “How did they even win that game?” You might be thinking that right now.\nIt gets weirder.\n2023 is highlighted in this chart because it’s the year Michigan rode an undefeated season to a national title. That team was dominant, so to see them have a game under 100 rushing yards seems strange. Obviously, they won the game. However, the score? It’s probably not what you’d expect given the low offensive output.\nThat game was a 26-0 win over Iowa in the Big Ten Championship, which is played at an indoor stadium. Blake Corum had 2 TDs on just 52 yards and 15 carries. Historically, Michigan has been bad when under 100 rushing yards, so winning in a blowout is remarkable.\nLet’s explore more into teams rushing under 100 yards to reveal why this score is so bizzare.\n\n\nCode\nunique(Logs$Outcome)\n\n\n[1] \"W\" \"L\"\n\n\n\n\nCode\ngames &lt;- Logs |&gt;\n  group_by(Season)|&gt;\n  summarise(\n    games = n()\n  )\n\n\nHere is a look at outcomes from all teams in NCAA. In 1069 games since 2011, teams with under rushing yards actually won.\nLet’s break it down further and get a percentage to see how often this happens.\n\n\nCode\nrushunder100 &lt;- winlosslogs |&gt; \n  filter(RushingYds &lt; 100)\n\n\n\n\nCode\nwin_percentage_under100 &lt;- rushunder100 |&gt;\n  summarise(\n    TotalGames = n(), \n    TotalWins = sum(Outcome == \"W\"), \n    WinPercentage = (TotalWins / TotalGames) * 100  \n  )\n\n\nprint(win_percentage_under100)\n\n\n  TotalGames TotalWins WinPercentage\n1       5034      1069       21.2356\n\n\nTeams rushing for under 100 rushing yards have only won 21% of the time since 2011. Running the ball isn’t always everythingm but such a minimal rushing attack doesn’t equal a lot of wins.\nLet’s study the Big Ten specifically because of Michigan.\n\n\nCode\nBigTenRush |&gt; group_by (TeamFull)|&gt;\n  filter(RushingYds &lt; 100) |&gt;\n  summarise(\n     TotalGames = n(),\n    TotalWins = sum(wins),\n    TotalLosses = TotalGames - TotalWins,\n    winpct = TotalWins/TotalGames) |&gt;\n  \n  arrange(desc(winpct))\n\n\n# A tibble: 16 × 5\n   TeamFull                 TotalGames TotalWins TotalLosses winpct\n   &lt;chr&gt;                         &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;  &lt;dbl&gt;\n 1 Ohio State Buckeyes              12         6           6 0.5   \n 2 Penn State Nittany Lions         44        21          23 0.477 \n 3 USC Trojans                       3         1           2 0.333 \n 4 Michigan State Spartans          49        15          34 0.306 \n 5 Northwestern Wildcats            52        15          37 0.288 \n 6 UCLA Bruins                       7         2           5 0.286 \n 7 Iowa Hawkeyes                    48        12          36 0.25  \n 8 Minnesota Golden Gophers         33         7          26 0.212 \n 9 Nebraska Cornhuskers             25         5          20 0.2   \n10 Michigan Wolverines              31         6          25 0.194 \n11 Illinois Fighting Illini         48         9          39 0.188 \n12 Purdue Boilermakers              74        13          61 0.176 \n13 Maryland Terrapins               37         5          32 0.135 \n14 Indiana Hoosiers                 50         6          44 0.12  \n15 Rutgers Scarlet Knights          37         2          35 0.0541\n16 Wisconsin Badgers                21         1          20 0.0476\n\n\nAs shown in the data, Ohio State is the only team to even reach .500 winning percentage when rushing for under 100 yards in a contest. Generally teams are really really bad in these kinds of games. Also, the amount of times a team has even had a game with under 100 rushing yards tells you a lot about the program.\nMichigan’s had it happen 31 times, with that aforementioned 6-25 record, so that’s interesting given how good they’ve been over the years.\nLet’s explore more. It’s important we look at passing data also to see if Michigan passed well in these games.\n\n\nCode\n    michigan &lt;- BigTenRush  |&gt; group_by(Season)|&gt; filter(TeamFull == \"Michigan Wolverines\", RushingYds &lt;100)|&gt;\n  summarise(\n    TotalGames = n(),\n    TotalWins = sum(wins),\n    TotalLosses = TotalGames - TotalWins,\n    winpct = TotalWins/TotalGames,\n    PassYPG = sum(PassingYds)/TotalGames\n    \n  )\n\n\nNot to surprising to see the averaging passing yards per game were also low in these losses. Bad Offensive usually = losses.\nIn 13 years of plays where the team has had games of under 100 rushing yards, the team only had a record over .500 in those games one season in 2023. Figures they only had 1 game under 100 rush yds in their National Championship year. They ran the ball really well that season. That 1 game is still just absurd.\nOverall, rushing the ball for over 100 yards is pretty important toward winning games, and the best teams historically are an example of that. With all this data revealed, it makes Michigan’s 26-0 win over Iowa such a strange outcome for that game.\nIs it the strangest blowout ever? You make the call."
  },
  {
    "objectID": "posts/aces-match/index.html",
    "href": "posts/aces-match/index.html",
    "title": "Serving looks better for Maryland in 2024. The standings don’t.",
    "section": "",
    "text": "Code\nsuppressPackageStartupMessages(library(tidyverse))\nlibrary(janitor)\n\n\n\nAttaching package: 'janitor'\n\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n\n\nCode\nlibrary(ggbeeswarm)\nlibrary(ggrepel)\n\n\n\n\nCode\nset.seed(1234)\n\n\n\n\nCode\nlogs &lt;- read_csv(\"https://raw.githubusercontent.com/dwillis/NCAAWomensVolleyballData/main/data/ncaa_womens_volleyball_playerstats_2023.csv\")\n\n\nRows: 5174 Columns: 36\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (7): team, full_name, roster_name, last_name, first_name, yr, pos\ndbl (26): ncaa_id, season, jersey, feet, inches, gp, gs, mp, s, kills, error...\nlgl  (3): ms, total_blocks, tb\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nactiveplayers &lt;- logs |&gt; filter(mp&gt;20, !is.na(aces))\n\n\nactiveplayers &lt;- activeplayers |&gt; mutate(acespm=aces/mp)\n\nsummary(activeplayers$acespm)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.0000  0.1333  0.5323  0.5544  0.8621  2.3448 \n\n\nCode\nacers &lt;- activeplayers |&gt; filter(acespm &gt; 0.8621)\n\n\numd &lt;- activeplayers |&gt; \n  filter(team == \"Maryland Terrapins, Terps\") |&gt; \n  filter(acespm&gt;0.8621) |&gt; \n  arrange(desc(acespm))\n\n\n\nggplot() + \n  geom_beeswarm(\n    data=acers, \n    groupOnX=TRUE, \n    aes(x=pos, y=acespm), color=\"grey\") + \n  geom_beeswarm(\n    data=umd, \n    groupOnX=TRUE, \n    aes(x=pos, y=acespm), color=\"red\")+\n   geom_text(\n    data=umd, \n    aes(x=pos, y=acespm, label=full_name)) +\nlabs(title = \"Maryland fixed its 2023 serving issue. The team still has an issue winning\", subtitle = \"Samantha Schnitta has been phenomenal, but the team hasn't won much in conference.\", caption = \"By Ben Strober\")\n\n\nWarning: The `groupOnX` argument of `geom_beeswarm()` is deprecated as of ggbeeswarm\n0.7.1.\nℹ ggplot2 now handles this case automatically.\n\n\n\n\n\n\n\n\n\nMaryland is 1-7 in Big Ten play this year, which is certainly a step back. This comes as a slight surprise given the teams vast improvement serving the ball. In 2023, Maryland lacked an identity in the serving department, as its top servers sat around the bottom compared to the rest of the NCAA’s qualified servers.\nAlthough the addition of Samantha Schnitta to the service line has sparked a massive change in the team’s ace department, the squad has regressed enough in other areas to outweigh it.\nIn 2023, Maryland only had one play over 1 ace per match, which is a massive shortcoming as revealed by the chart. Erin Engel, who served as the team’s specialist, transferred to Florida last spring. This left Maryland’s serving game in question at the time, but 2024 has looked much different.\nSchnitta’s 0.83 aces per set is the best in the entire nation. That mean’s the team should be doing a lot better, right? Wrong. Through the first 8 games of Big Ten play, Maryland has just one win. In 2023, the team had 3 at the time, including a win over #16 Minnesota.\nDespite major improvements from Adam Hughes’ team at the service line, the Terps haven’t been able to put it together in enough departments to increase the win total.\nEND\nNarration:\nAfter discovering the third quartile for aces per match as the measuring stick, Maryland only had 3 players qualify among everyone in the NCAA.\nAs revealed, Maryland only had one player average over an ace per match, which was more or less close the the bottom compared to most teams.\nThe beeswarm also reveals by position where teams get its ace production from and Maryland was well below average for OH’s, which is where most teams appear to have its leaders.\nFor discovering acers: The data set went from 3226 players who are actually active, to jus 799 players who qualified as an “acer.”"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Strober’s SportsBlog",
    "section": "",
    "text": "Serving looks better for Maryland in 2024. The standings don’t.\n\n\n\n\n\n\nlowercaseword\n\n\nlowercaseword\n\n\nlowercaseword\n\n\n\n\n\n\n\n\n\nOct 24, 2024\n\n\nBen Strober\n\n\n\n\n\n\n\n\n\n\n\n\nDefensive Regression Haults Maryland football’s Progression\n\n\n\n\n\n\nlowercaseword\n\n\nlowercaseword\n\n\nlowercaseword\n\n\n\n\n\n\n\n\n\nOct 23, 2024\n\n\nBen Strober\n\n\n\n\n\n\n\n\n\n\n\n\nMichigan’s Big Ten Title win is one of the Strangest Blowouts you’ll ever see\n\n\n\n\n\n\nlowercaseword\n\n\nlowercaseword\n\n\nlowercaseword\n\n\n\n\n\n\n\n\n\nOct 22, 2024\n\n\nBen Strober\n\n\n\n\n\n\n\n\n\n\n\n\nMaryland’s infamous 3rd and 6 run: Was it really that strange?\n\n\n\n\n\n\nlowercaseword\n\n\nlowercaseword\n\n\nlowercaseword\n\n\n\n\n\n\n\n\n\nOct 15, 2024\n\n\nBen Strober\n\n\n\n\n\n\n\n\n\n\n\n\nMaryland dominates the Big Ten in aces. Why not the win column?\n\n\n\n\n\n\nlowercaseword\n\n\nlowercaseword\n\n\nlowercaseword\n\n\n\n\n\n\n\n\n\nOct 10, 2024\n\n\nBen Strober\n\n\n\n\n\n\n\n\n\n\n\n\nDespite changes to clock stoppage, Big Ten teams see similar amount of offensive plays\n\n\n\n\n\n\nlowercaseword\n\n\nlowercaseword\n\n\nlowercaseword\n\n\n\n\n\n\n\n\n\nOct 8, 2024\n\n\nBen Strober\n\n\n\n\n\n\n\n\n\n\n\n\nBig Ten Plays\n\n\n\n\n\n\nlowercaseword\n\n\nlowercaseword\n\n\nlowercaseword\n\n\n\n\n\n\n\n\n\nOct 8, 2024\n\n\nBen Strober\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nOct 1, 2024\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nSep 28, 2024\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/big-ten-plays/index.html",
    "href": "posts/big-ten-plays/index.html",
    "title": "Despite changes to clock stoppage, Big Ten teams see similar amount of offensive plays",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\n plays_2023 &lt;- read_csv(\"https://dwillis.github.io/sports-data-files/footballlogs23.csv\")\n\n\nRows: 1702 Columns: 54\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (45): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\n plays_2024 &lt;- read_csv(\"https://dwillis.github.io/sports-data-files/footballlogs24.csv\")\n\n\nRows: 704 Columns: 54\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (45): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nCode\n  bigten23 &lt;- plays_2023 |&gt;  filter(Conference == \"Big Ten Conference\")\n  bigten24 &lt;- plays_2024 |&gt;  filter(Conference == \"Big Ten Conference\")\n\n\nHere we can see the results from the data just involving the Big Ten Conference.\n\n\nCode\nbigten23 |&gt; group_by(OffensivePlays)\n\n\n# A tibble: 180 × 54\n# Groups:   OffensivePlays [39]\n    Game Date       HomeAway Opponent    Result PassingCmp PassingAtt PassingPct\n   &lt;dbl&gt; &lt;date&gt;     &lt;chr&gt;    &lt;chr&gt;       &lt;chr&gt;       &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;\n 1     1 2023-09-02 &lt;NA&gt;     East Carol… W (30…         26         31       83.9\n 2     2 2023-09-09 &lt;NA&gt;     Nevada-Las… W (35…         23         28       82.1\n 3     3 2023-09-16 &lt;NA&gt;     Bowling Gr… W (31…          8         13       61.5\n 4     4 2023-09-23 &lt;NA&gt;     Rutgers     W (31…         15         21       71.4\n 5     5 2023-09-30 @        Nebraska    W (45…         16         23       69.6\n 6     6 2023-10-07 @        Minnesota   W (52…         16         23       69.6\n 7     7 2023-10-14 &lt;NA&gt;     Indiana     W (52…         19         22       86.4\n 8     8 2023-10-21 @        Michigan S… W (49…         28         35       80  \n 9     9 2023-11-04 &lt;NA&gt;     Purdue      W (41…         24         37       64.9\n10    10 2023-11-11 @        Penn State  W (24…          7          8       87.5\n# ℹ 170 more rows\n# ℹ 46 more variables: PassingYds &lt;dbl&gt;, PassingTD &lt;dbl&gt;, RushingAtt &lt;dbl&gt;,\n#   RushingYds &lt;dbl&gt;, RushingAvg &lt;dbl&gt;, RushingTD &lt;dbl&gt;, OffensivePlays &lt;dbl&gt;,\n#   OffensiveYards &lt;dbl&gt;, OffenseAvg &lt;dbl&gt;, FirstDownPass &lt;dbl&gt;,\n#   FirstDownRush &lt;dbl&gt;, FirstDownPen &lt;dbl&gt;, FirstDownTotal &lt;dbl&gt;,\n#   Penalties &lt;dbl&gt;, PenaltyYds &lt;dbl&gt;, Fumbles &lt;dbl&gt;, Interceptions &lt;dbl&gt;,\n#   TotalTurnovers &lt;dbl&gt;, TeamFull &lt;chr&gt;, TeamURL &lt;chr&gt;, Outcome &lt;chr&gt;, …\n\n\nCode\nbigten24 |&gt; group_by(OffensivePlays)\n\n\n# A tibble: 96 × 54\n# Groups:   OffensivePlays [35]\n    Game Date       HomeAway Opponent    Result PassingCmp PassingAtt PassingPct\n   &lt;dbl&gt; &lt;date&gt;     &lt;chr&gt;    &lt;chr&gt;       &lt;chr&gt;       &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;\n 1     1 2024-08-31 &lt;NA&gt;     Florida In… W (31…         15         25       60  \n 2     2 2024-09-06 &lt;NA&gt;     Western Il… W (77…         19         21       90.5\n 3     3 2024-09-14 @        UCLA        W (42…         25         33       75.8\n 4     4 2024-09-21 &lt;NA&gt;     Charlotte   W (52…         18         27       66.7\n 5     5 2024-09-28 &lt;NA&gt;     Maryland    W (42…         22         33       66.7\n 6     6 2024-10-05 @        Northweste… W (41…         25         33       75.8\n 7     1 2024-08-31 &lt;NA&gt;     Akron       W (52…         18         31       58.1\n 8     2 2024-09-07 &lt;NA&gt;     Western Mi… W (56…         25         33       75.8\n 9     3 2024-09-21 &lt;NA&gt;     Marshall    W (49…         18         26       69.2\n10     4 2024-09-28 @        Michigan S… W (38…         26         40       65  \n# ℹ 86 more rows\n# ℹ 46 more variables: PassingYds &lt;dbl&gt;, PassingTD &lt;dbl&gt;, RushingAtt &lt;dbl&gt;,\n#   RushingYds &lt;dbl&gt;, RushingAvg &lt;dbl&gt;, RushingTD &lt;dbl&gt;, OffensivePlays &lt;dbl&gt;,\n#   OffensiveYards &lt;dbl&gt;, OffenseAvg &lt;dbl&gt;, FirstDownPass &lt;dbl&gt;,\n#   FirstDownRush &lt;dbl&gt;, FirstDownPen &lt;dbl&gt;, FirstDownTotal &lt;dbl&gt;,\n#   Penalties &lt;dbl&gt;, PenaltyYds &lt;dbl&gt;, Fumbles &lt;dbl&gt;, Interceptions &lt;dbl&gt;,\n#   TotalTurnovers &lt;dbl&gt;, TeamFull &lt;chr&gt;, TeamURL &lt;chr&gt;, Outcome &lt;chr&gt;, …\n\n\n\n\nCode\nbigten23 |&gt; group_by(TeamFull)|&gt;\n    summarise(mean_offensive_plays = mean(OffensivePlays, na.rm = TRUE))\n\n\n# A tibble: 14 × 2\n   TeamFull                 mean_offensive_plays\n   &lt;chr&gt;                                   &lt;dbl&gt;\n 1 Illinois Fighting Illini                 67.6\n 2 Indiana Hoosiers                         66.7\n 3 Iowa Hawkeyes                            59.6\n 4 Maryland Terrapins                       66  \n 5 Michigan State Spartans                  62.4\n 6 Michigan Wolverines                      61.6\n 7 Minnesota Golden Gophers                 62.8\n 8 Nebraska Cornhuskers                     61.6\n 9 Northwestern Wildcats                    65.2\n10 Ohio State Buckeyes                      63.9\n11 Penn State Nittany Lions                 71.4\n12 Purdue Boilermakers                      71.2\n13 Rutgers Scarlet Knights                  62.4\n14 Wisconsin Badgers                        71  \n\n\nThis data reveals the total amount of offensive plays for each Big Ten team in 2023. Let’s see how it was in 2024. Then, let’s see the averages.\n\n\nCode\nbigten24 |&gt; group_by(TeamFull)|&gt;\n    summarise(mean_offensive_plays = mean(OffensivePlays, na.rm = TRUE))\n\n\n# A tibble: 18 × 2\n   TeamFull                 mean_offensive_plays\n   &lt;chr&gt;                                   &lt;dbl&gt;\n 1 Illinois Fighting Illini                 62.2\n 2 Indiana Hoosiers                         67.7\n 3 Iowa Hawkeyes                            63.8\n 4 Maryland Terrapins                       72.6\n 5 Michigan State Spartans                  60.5\n 6 Michigan Wolverines                      60  \n 7 Minnesota Golden Gophers                 61.3\n 8 Nebraska Cornhuskers                     65.5\n 9 Northwestern Wildcats                    62.8\n10 Ohio State Buckeyes                      66.6\n11 Oregon Ducks                             70.4\n12 Penn State Nittany Lions                 63.4\n13 Purdue Boilermakers                      53.2\n14 Rutgers Scarlet Knights                  68  \n15 UCLA Bruins                              54.6\n16 USC Trojans                              71.8\n17 Washington Huskies                       65.5\n18 Wisconsin Badgers                        69.2\n\n\n\n\nCode\nmean_offensive_plays_bigten24 &lt;- bigten24 |&gt; \n  group_by(TeamFull) |&gt; \n  summarise(mean_offensive_plays = mean(OffensivePlays, na.rm = TRUE))\n\n\nmean_offensive_plays_bigten23 &lt;- bigten23 |&gt; \n  group_by(TeamFull) |&gt; \n  summarise(mean_offensive_plays = mean(OffensivePlays, na.rm = TRUE))\n\n\nNow we have the averages from 2024. Are there differences? What do we notice? Let’s calculate the total mean for each season with all the teams combined.\n\n\nCode\nmean_24 &lt;- bigten24 |&gt; \n  summarise(total_mean = mean(OffensivePlays, na.rm = TRUE))\n\n\n\n\nCode\nmean_23 &lt;- bigten23 |&gt; \n  summarise(total_mean = mean(OffensivePlays, na.rm = TRUE))\n\n\nAs revealed by the code, the mean average of offensive plays in 2023 was 65.14. In 2024, that mean is 64.33. So basically, not a big difference. Let’s create bar charts for this information.\n\n\nCode\nggplot() + \n  geom_bar(\n    data = mean_offensive_plays_bigten23, \n    aes(\n      x = reorder(TeamFull, -mean_offensive_plays), \n      weight = mean_offensive_plays\n    )\n  ) +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot() + \n  geom_bar(\n    data = mean_offensive_plays_bigten24, \n    aes(\n      x = reorder(TeamFull, -mean_offensive_plays), \n      weight = mean_offensive_plays\n    )\n  ) +\n  coord_flip()\n\n\n\n\n\n\n\n\n\nAfter creating both the bar charts, we see some big changes from certain schools between 2023 and 2024 for the average number of plays. In 2023, Purdue ran the second most amount of plays on average in the conference. However, in 2024, the Boilermakers drop to last in the Big Ten for plays ran. Also, the introduction of Oregon and USC sees them already around the top for plays ran. Maryland leads the conference in 2024 for average plays ran with 72.6. Also, 2024 reveals that all but 2 teams average at least 60 offensive plays a game. In 2023, Iowa was the only team to fall under that mark. Although there are new rules with clock stoppages, it hasn’t caused a large effect on how many offensive plays team’s in the Big Ten run each game."
  },
  {
    "objectID": "posts/Commanders-goated/index.html",
    "href": "posts/Commanders-goated/index.html",
    "title": "Commanders are actually good?",
    "section": "",
    "text": "My first post\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nattendance &lt;- read_csv(\"https://dwillis.github.io/sports-data-files/attendance.csv\")\n\n\nRows: 146 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): Institution, Conference\ndbl (11): 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/Volleyball Waffle Chart/index.html",
    "href": "posts/Volleyball Waffle Chart/index.html",
    "title": "Maryland dominates the Big Ten in aces. Why not the win column?",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(waffle)\nlibrary(dplyr)\n\n\n\n\nCode\nStats &lt;- read_csv(\"https://raw.githubusercontent.com/dwillis/NCAAWomensVolleyballData/main/data/ncaa_womens_volleyball_matchstats_2024.csv\")\n\n\nRows: 5235 Columns: 39\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (4): team, opponent, home_away, result\ndbl  (34): ncaa_id, team_score, opponent_score, s, kills, errors, total_atta...\ndate  (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nCode\nmaryland_stats &lt;- Stats |&gt;\n  filter(team == \"Maryland\") |&gt;\n  summarise(\n    Total_Kills = sum(kills, na.rm = TRUE),\n    Total_Blocks = sum(block_solos + block_assists / 2, na.rm = TRUE),\n    Total_Aces = sum(aces, na.rm = TRUE),\n    Total_Opponent_Errors = sum(opponent_score, na.rm = TRUE)\n  )\n\n\nIn 2024, Maryland has notched 127 aces! That’s a lot and good for best in the Big Ten Conference. How does that compare to another squad in the Big Ten that has performed better in conference play?\nBefore we answer that question let’s take a closer look at the distribution of all these Maryland stats.\n\n\nCode\nmd &lt;- c(\"Total_Kills\"=714, \"Total_Blocks\"=139, \"Total_Aces\"=127, \"Total_Opponent_Errors\"=20)\n\n\n\n\nCode\nwaffle(\n   md/4, \n        rows = 10, \n        title=\"Maryland's point distribution\", \n        xlab=\"1 square = 1 point\", \n        colors = c(\"black\", \"red\", \"yellow\", \"grey\")\n)\n\n\n\n\n\n\n\n\n\nAs expected, the kills far and away are the largest stat shown on screen. However, Maryland has picked up a slight identity in aces. For a team that used to block better than anyone in the nation, it’s surprising to see the aces and blocks nearly identical. Having the nation’s leader in aces per set, Samantha Schnitta, certainly helps.\nHow does Maryland stack up to another Big Ten team. Let’s use Indiana in this example.\n\n\nCode\nindiana_stats &lt;- Stats |&gt;\n  filter(team == \"Indiana\") |&gt;\n  summarise(\n    Total_Kills = sum(kills, na.rm = TRUE),\n    Total_Blocks = sum(block_solos + block_assists / 2, na.rm = TRUE),\n    Total_Aces = sum(aces, na.rm = TRUE),\n    Total_Opponent_Errors = sum(opponent_score, na.rm = TRUE)\n  )\n\n\n\n\nCode\niu &lt;- c(\"Total_Kills\"=677, \"Total_Blocks\"=114, \"Total_Aces\"=93, \"Total_Opponent_Errors\"=24)\n\n\n\n\nCode\nwaffle(\n   iu/4, \n        rows = 10, \n        title=\"Indiana's Point Distribution\", \n        xlab=\"1 square = 1 point\", \n        colors = c(\"red\", \"grey\", \"black\", \"orange\")\n)\n\n\n\n\n\n\n\n\n\nUnsurprisingly, Maryland and Indiana’s kill totals are fairly similar. Maryland holds the slight advantage in the offensive category. As for defensive work, the two squads aren’t far off either. Maryland’s 139 blocks is greater than Indiana’s 114, but on the chart it does not look like a significant difference. We can see a major difference is in service aces. Maryland has been excellent on the service ace, which is why it has 34 more than Indiana. We know this is a significant difference because Maryland’s 127 leads the conference, while Michigan in second only has 108. No knock on Indiana here serving; its ace total is good for 6th best in the nation’s top conference.\nOne last similarity visible is the opponent error totals. Indiana holds just a slim four-point advantage in that category. Overall, despite Maryland’s significant advantage in the ace department, it and Indiana are actually pretty similar in other aspects of point distribution. Maryland started off conference play with a rocky couple of losses at home. Indiana also dropped its first 2 conference matches to Oregon and Washington.\nIt seems odd that Maryland is so dominant compared to the rest of the star-studded conference in a difficult category such as the ace. Is it because of a weak out of conference schedule, which saw it go 9-2? The remainder of the season may answer these questions.\nThere is a lot of volleyball left to be played. It will be interesting to see if Maryland’s ace prowess can lead it to a signature win or two."
  }
]