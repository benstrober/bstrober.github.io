[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/Third and Six/index.html",
    "href": "posts/Third and Six/index.html",
    "title": "Maryland’s infamous 3rd and 6 run: Was it really that strange?",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(dplyr)\nlibrary(cfbfastR)\nlibrary(waffle)\n\n\n\n\nCode\npbp &lt;-load_cfb_pbp(seasons = c(2019,2020,2021,2022,2023,2024))\n\n\n\n\nCode\nthird_and_six &lt;- pbp |&gt;\n  filter(down == 3, distance ==6)\n\n\n\n\nCode\nthird_and_six|&gt;\n  group_by(play_type)|&gt;\n  summarise(count = n()) \n\n\n# A tibble: 22 × 2\n   play_type                            count\n   &lt;chr&gt;                                &lt;int&gt;\n 1 Blocked Field Goal                       2\n 2 End Period                               6\n 3 End of Game                              1\n 4 Field Goal Good                         16\n 5 Field Goal Missed                        6\n 6 Fumble Recovery (Opponent)             101\n 7 Fumble Recovery (Opponent) Touchdown     1\n 8 Fumble Recovery (Own)                   76\n 9 Fumble Return Touchdown                  7\n10 Interception Return                    257\n# ℹ 12 more rows\n\n\n\n\nCode\nthird_and_six_runs &lt;- third_and_six |&gt;\n  filter(rush ==\"1\")\n\ntotal_runs &lt;- third_and_six_runs |&gt;\nsummarise(count = n()) |&gt;\n  pluck(1)\ntotal_runs/15661\n\n\n[1] 0.2163974\n\n\nTeams ran the ball about 21.6% of the time on 3rd down and 6.\n\n\nCode\nthird_and_six |&gt;\n  summarise(\n    average_yds = mean(yards_gained)\n  )\n\n\n# A tibble: 1 × 1\n  average_yds\n        &lt;dbl&gt;\n1        5.20\n\n\nTeams who ran the ball on 3rd down and 6 picked up on average 5.19 yards. Let’s hope they were in two-down territory.\n\n\nCode\nrun_counts &lt;- third_and_six_runs |&gt;\n  group_by(pos_team) |&gt;\n  summarise(total_runs = n()) |&gt;\n  arrange(desc(total_runs)) \n\n\nNavy runs the most on third and 6, which isn’t a surprise, as they’ve done it 60 times.\n\n\nCode\nthird_and_six |&gt; group_by(pos_team, year)|&gt; filter(rush == \"1\", pos_team ==\"Maryland\") |&gt;\nsummarise(\n  count = n())\n\n\n`summarise()` has grouped output by 'pos_team'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 5 × 3\n# Groups:   pos_team [1]\n  pos_team  year count\n  &lt;chr&gt;    &lt;int&gt; &lt;int&gt;\n1 Maryland  2019     1\n2 Maryland  2021     4\n3 Maryland  2022     6\n4 Maryland  2023     5\n5 Maryland  2024     1\n\n\nIn 2023, which had the infamous call on Homecoming, Maryland ran the ball on third and 6 five times. In 2024, they have only done so one time.Let’s take a visual look compare this data to an SEC team like Ole Miss.\n\n\nCode\nmd &lt;- c(\"Rush\"=17, \"Pass\"=46)\nom &lt;- c(\"Rush\"=31, \"Pass\"=55)\n\n\n\n\nCode\nthird_and_six |&gt; group_by(pos_team, year)|&gt; filter(rush == \"1\", pos_team ==\"Ole Miss\") |&gt;\nsummarise(\n  count = n())\n\n\n`summarise()` has grouped output by 'pos_team'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 6 × 3\n# Groups:   pos_team [1]\n  pos_team  year count\n  &lt;chr&gt;    &lt;int&gt; &lt;int&gt;\n1 Ole Miss  2019     6\n2 Ole Miss  2020     4\n3 Ole Miss  2021     6\n4 Ole Miss  2022     4\n5 Ole Miss  2023     8\n6 Ole Miss  2024     3\n\n\n\n\nCode\nthird_and_six |&gt; group_by(pos_team, year)|&gt; filter(pass == \"1\", pos_team ==\"Ole Miss\") |&gt;\nsummarise(\n  count = n())\n\n\n`summarise()` has grouped output by 'pos_team'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 6 × 3\n# Groups:   pos_team [1]\n  pos_team  year count\n  &lt;chr&gt;    &lt;int&gt; &lt;int&gt;\n1 Ole Miss  2019    12\n2 Ole Miss  2020     7\n3 Ole Miss  2021     7\n4 Ole Miss  2022     6\n5 Ole Miss  2023    12\n6 Ole Miss  2024    11\n\n\n\n\nCode\nthird_and_six |&gt; group_by(pos_team, year)|&gt; filter(pass == \"1\", pos_team ==\"Maryland\") |&gt;\nsummarise(\n  count = n())\n\n\n`summarise()` has grouped output by 'pos_team'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 6 × 3\n# Groups:   pos_team [1]\n  pos_team  year count\n  &lt;chr&gt;    &lt;int&gt; &lt;int&gt;\n1 Maryland  2019     4\n2 Maryland  2020    11\n3 Maryland  2021     6\n4 Maryland  2022    12\n5 Maryland  2023     7\n6 Maryland  2024     6\n\n\n\n\nCode\nwaffle(\n        md, \n        rows = 10, \n        title=\"Maryland on third and six\", \n        xlab=\"1 square = 1 yard\", \n        colors = c(\"black\", \"red\")\n)\n\n\n\n\n\n\n\n\n\nAs shown, Maryland over the past few years typically doesn’t run the ball on third and six. This seems about right, but last year featured the team do it the second most in the past 5 years, with 2022 seeing the rush called the most.\nLet’s take a look at Ole Miss compared to Maryland.\n\n\nCode\niron(\n waffle(md/2, \n        rows = 10, \n        title=\"Maryland 3rd and 6\", \n        xlab=\"1 square = 1 yard\", \n        colors = c(\"black\", \"red\")\n        ),\n waffle(om/2, \n        rows = 10, \n        title=\"Ole Miss 3rd and 6\", \n        xlab=\"1 square = 1 yard\",\n        colors = c(\"blue\", \"grey\")\n        )\n)\n\n\n\n\n\n\n\n\n\nIt was very obvious Navy, Army and Air Force would top the list of teams that run the ball on third down and six. For that reason, we didn’t include them in a visualization. When looking through teams that ran the ball on third and six the most, it was slightly surprising to see Ole Miss so high up on the list. When taking a look at the waffle, it’s evident Ole Miss has been much more run-heavy on this down and distance compared to Maryland. Ole Miss ran 31 times, compared to Maryland’s 17. Maryland has only done so once this year, which is interesting considering they have a QB that is probably a stronger runner than Taulia was. Ole Miss’ offense also features quite a bit of QB runs, so maybe that’s what inflates these 3rd and medium running plays.\nPeople were furious with Locksley after that play-call. However, this data suggest it’s not entirely weird. Of course, play-calling should be dependent on the team’s offensive scheme and personel, but seeing a team as good as Ole Miss do it this often signifies it works for some. Based on this year so far, Maryland has changed its behavior and only ran 1 time in this situation.\nWhen sifting through all the teams that are pretty high up, there is a lot of good teams that actually run the ball a lot on third and six, revealing that this play-call isn’t as absurd as people reacted."
  },
  {
    "objectID": "posts/Commanders-goated/index.html",
    "href": "posts/Commanders-goated/index.html",
    "title": "Commanders are actually good?",
    "section": "",
    "text": "My first post\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nattendance &lt;- read_csv(\"https://dwillis.github.io/sports-data-files/attendance.csv\")\n\n\nRows: 146 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): Institution, Conference\ndbl (11): 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Strober’s SportsBlog",
    "section": "",
    "text": "Maryland’s infamous 3rd and 6 run: Was it really that strange?\n\n\n\n\n\n\nlowercaseword\n\n\nlowercaseword\n\n\nlowercaseword\n\n\n\n\n\n\n\n\n\nOct 15, 2024\n\n\nBen Strober\n\n\n\n\n\n\n\n\n\n\n\n\nMaryland dominates the Big Ten in aces. Why not the win column?\n\n\n\n\n\n\nlowercaseword\n\n\nlowercaseword\n\n\nlowercaseword\n\n\n\n\n\n\n\n\n\nOct 10, 2024\n\n\nBen Strober\n\n\n\n\n\n\n\n\n\n\n\n\nDespite changes to clock stoppage, Big Ten teams see similar amount of offensive plays\n\n\n\n\n\n\nlowercaseword\n\n\nlowercaseword\n\n\nlowercaseword\n\n\n\n\n\n\n\n\n\nOct 8, 2024\n\n\nBen Strober\n\n\n\n\n\n\n\n\n\n\n\n\nBig Ten Plays\n\n\n\n\n\n\nlowercaseword\n\n\nlowercaseword\n\n\nlowercaseword\n\n\n\n\n\n\n\n\n\nOct 8, 2024\n\n\nBen Strober\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nOct 1, 2024\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nSep 28, 2024\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/big-ten-plays/index.html",
    "href": "posts/big-ten-plays/index.html",
    "title": "Despite changes to clock stoppage, Big Ten teams see similar amount of offensive plays",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\n plays_2023 &lt;- read_csv(\"https://dwillis.github.io/sports-data-files/footballlogs23.csv\")\n\n\nRows: 1702 Columns: 54\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (45): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\n plays_2024 &lt;- read_csv(\"https://dwillis.github.io/sports-data-files/footballlogs24.csv\")\n\n\nRows: 704 Columns: 54\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (45): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nCode\n  bigten23 &lt;- plays_2023 |&gt;  filter(Conference == \"Big Ten Conference\")\n  bigten24 &lt;- plays_2024 |&gt;  filter(Conference == \"Big Ten Conference\")\n\n\nHere we can see the results from the data just involving the Big Ten Conference.\n\n\nCode\nbigten23 |&gt; group_by(OffensivePlays)\n\n\n# A tibble: 180 × 54\n# Groups:   OffensivePlays [39]\n    Game Date       HomeAway Opponent    Result PassingCmp PassingAtt PassingPct\n   &lt;dbl&gt; &lt;date&gt;     &lt;chr&gt;    &lt;chr&gt;       &lt;chr&gt;       &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;\n 1     1 2023-09-02 &lt;NA&gt;     East Carol… W (30…         26         31       83.9\n 2     2 2023-09-09 &lt;NA&gt;     Nevada-Las… W (35…         23         28       82.1\n 3     3 2023-09-16 &lt;NA&gt;     Bowling Gr… W (31…          8         13       61.5\n 4     4 2023-09-23 &lt;NA&gt;     Rutgers     W (31…         15         21       71.4\n 5     5 2023-09-30 @        Nebraska    W (45…         16         23       69.6\n 6     6 2023-10-07 @        Minnesota   W (52…         16         23       69.6\n 7     7 2023-10-14 &lt;NA&gt;     Indiana     W (52…         19         22       86.4\n 8     8 2023-10-21 @        Michigan S… W (49…         28         35       80  \n 9     9 2023-11-04 &lt;NA&gt;     Purdue      W (41…         24         37       64.9\n10    10 2023-11-11 @        Penn State  W (24…          7          8       87.5\n# ℹ 170 more rows\n# ℹ 46 more variables: PassingYds &lt;dbl&gt;, PassingTD &lt;dbl&gt;, RushingAtt &lt;dbl&gt;,\n#   RushingYds &lt;dbl&gt;, RushingAvg &lt;dbl&gt;, RushingTD &lt;dbl&gt;, OffensivePlays &lt;dbl&gt;,\n#   OffensiveYards &lt;dbl&gt;, OffenseAvg &lt;dbl&gt;, FirstDownPass &lt;dbl&gt;,\n#   FirstDownRush &lt;dbl&gt;, FirstDownPen &lt;dbl&gt;, FirstDownTotal &lt;dbl&gt;,\n#   Penalties &lt;dbl&gt;, PenaltyYds &lt;dbl&gt;, Fumbles &lt;dbl&gt;, Interceptions &lt;dbl&gt;,\n#   TotalTurnovers &lt;dbl&gt;, TeamFull &lt;chr&gt;, TeamURL &lt;chr&gt;, Outcome &lt;chr&gt;, …\n\n\nCode\nbigten24 |&gt; group_by(OffensivePlays)\n\n\n# A tibble: 96 × 54\n# Groups:   OffensivePlays [35]\n    Game Date       HomeAway Opponent    Result PassingCmp PassingAtt PassingPct\n   &lt;dbl&gt; &lt;date&gt;     &lt;chr&gt;    &lt;chr&gt;       &lt;chr&gt;       &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;\n 1     1 2024-08-31 &lt;NA&gt;     Florida In… W (31…         15         25       60  \n 2     2 2024-09-06 &lt;NA&gt;     Western Il… W (77…         19         21       90.5\n 3     3 2024-09-14 @        UCLA        W (42…         25         33       75.8\n 4     4 2024-09-21 &lt;NA&gt;     Charlotte   W (52…         18         27       66.7\n 5     5 2024-09-28 &lt;NA&gt;     Maryland    W (42…         22         33       66.7\n 6     6 2024-10-05 @        Northweste… W (41…         25         33       75.8\n 7     1 2024-08-31 &lt;NA&gt;     Akron       W (52…         18         31       58.1\n 8     2 2024-09-07 &lt;NA&gt;     Western Mi… W (56…         25         33       75.8\n 9     3 2024-09-21 &lt;NA&gt;     Marshall    W (49…         18         26       69.2\n10     4 2024-09-28 @        Michigan S… W (38…         26         40       65  \n# ℹ 86 more rows\n# ℹ 46 more variables: PassingYds &lt;dbl&gt;, PassingTD &lt;dbl&gt;, RushingAtt &lt;dbl&gt;,\n#   RushingYds &lt;dbl&gt;, RushingAvg &lt;dbl&gt;, RushingTD &lt;dbl&gt;, OffensivePlays &lt;dbl&gt;,\n#   OffensiveYards &lt;dbl&gt;, OffenseAvg &lt;dbl&gt;, FirstDownPass &lt;dbl&gt;,\n#   FirstDownRush &lt;dbl&gt;, FirstDownPen &lt;dbl&gt;, FirstDownTotal &lt;dbl&gt;,\n#   Penalties &lt;dbl&gt;, PenaltyYds &lt;dbl&gt;, Fumbles &lt;dbl&gt;, Interceptions &lt;dbl&gt;,\n#   TotalTurnovers &lt;dbl&gt;, TeamFull &lt;chr&gt;, TeamURL &lt;chr&gt;, Outcome &lt;chr&gt;, …\n\n\n\n\nCode\nbigten23 |&gt; group_by(TeamFull)|&gt;\n    summarise(mean_offensive_plays = mean(OffensivePlays, na.rm = TRUE))\n\n\n# A tibble: 14 × 2\n   TeamFull                 mean_offensive_plays\n   &lt;chr&gt;                                   &lt;dbl&gt;\n 1 Illinois Fighting Illini                 67.6\n 2 Indiana Hoosiers                         66.7\n 3 Iowa Hawkeyes                            59.6\n 4 Maryland Terrapins                       66  \n 5 Michigan State Spartans                  62.4\n 6 Michigan Wolverines                      61.6\n 7 Minnesota Golden Gophers                 62.8\n 8 Nebraska Cornhuskers                     61.6\n 9 Northwestern Wildcats                    65.2\n10 Ohio State Buckeyes                      63.9\n11 Penn State Nittany Lions                 71.4\n12 Purdue Boilermakers                      71.2\n13 Rutgers Scarlet Knights                  62.4\n14 Wisconsin Badgers                        71  \n\n\nThis data reveals the total amount of offensive plays for each Big Ten team in 2023. Let’s see how it was in 2024. Then, let’s see the averages.\n\n\nCode\nbigten24 |&gt; group_by(TeamFull)|&gt;\n    summarise(mean_offensive_plays = mean(OffensivePlays, na.rm = TRUE))\n\n\n# A tibble: 18 × 2\n   TeamFull                 mean_offensive_plays\n   &lt;chr&gt;                                   &lt;dbl&gt;\n 1 Illinois Fighting Illini                 62.2\n 2 Indiana Hoosiers                         67.7\n 3 Iowa Hawkeyes                            63.8\n 4 Maryland Terrapins                       72.6\n 5 Michigan State Spartans                  60.5\n 6 Michigan Wolverines                      60  \n 7 Minnesota Golden Gophers                 61.3\n 8 Nebraska Cornhuskers                     65.5\n 9 Northwestern Wildcats                    62.8\n10 Ohio State Buckeyes                      66.6\n11 Oregon Ducks                             70.4\n12 Penn State Nittany Lions                 63.4\n13 Purdue Boilermakers                      53.2\n14 Rutgers Scarlet Knights                  68  \n15 UCLA Bruins                              54.6\n16 USC Trojans                              71.8\n17 Washington Huskies                       65.5\n18 Wisconsin Badgers                        69.2\n\n\n\n\nCode\nmean_offensive_plays_bigten24 &lt;- bigten24 |&gt; \n  group_by(TeamFull) |&gt; \n  summarise(mean_offensive_plays = mean(OffensivePlays, na.rm = TRUE))\n\n\nmean_offensive_plays_bigten23 &lt;- bigten23 |&gt; \n  group_by(TeamFull) |&gt; \n  summarise(mean_offensive_plays = mean(OffensivePlays, na.rm = TRUE))\n\n\nNow we have the averages from 2024. Are there differences? What do we notice? Let’s calculate the total mean for each season with all the teams combined.\n\n\nCode\nmean_24 &lt;- bigten24 |&gt; \n  summarise(total_mean = mean(OffensivePlays, na.rm = TRUE))\n\n\n\n\nCode\nmean_23 &lt;- bigten23 |&gt; \n  summarise(total_mean = mean(OffensivePlays, na.rm = TRUE))\n\n\nAs revealed by the code, the mean average of offensive plays in 2023 was 65.14. In 2024, that mean is 64.33. So basically, not a big difference. Let’s create bar charts for this information.\n\n\nCode\nggplot() + \n  geom_bar(\n    data = mean_offensive_plays_bigten23, \n    aes(\n      x = reorder(TeamFull, -mean_offensive_plays), \n      weight = mean_offensive_plays\n    )\n  ) +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot() + \n  geom_bar(\n    data = mean_offensive_plays_bigten24, \n    aes(\n      x = reorder(TeamFull, -mean_offensive_plays), \n      weight = mean_offensive_plays\n    )\n  ) +\n  coord_flip()\n\n\n\n\n\n\n\n\n\nAfter creating both the bar charts, we see some big changes from certain schools between 2023 and 2024 for the average number of plays. In 2023, Purdue ran the second most amount of plays on average in the conference. However, in 2024, the Boilermakers drop to last in the Big Ten for plays ran. Also, the introduction of Oregon and USC sees them already around the top for plays ran. Maryland leads the conference in 2024 for average plays ran with 72.6. Also, 2024 reveals that all but 2 teams average at least 60 offensive plays a game. In 2023, Iowa was the only team to fall under that mark. Although there are new rules with clock stoppages, it hasn’t caused a large effect on how many offensive plays team’s in the Big Ten run each game."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/Volleyball Waffle Chart/index.html",
    "href": "posts/Volleyball Waffle Chart/index.html",
    "title": "Maryland dominates the Big Ten in aces. Why not the win column?",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(waffle)\nlibrary(dplyr)\n\n\n\n\nCode\nStats &lt;- read_csv(\"https://raw.githubusercontent.com/dwillis/NCAAWomensVolleyballData/main/data/ncaa_womens_volleyball_matchstats_2024.csv\")\n\n\nRows: 5235 Columns: 39\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (4): team, opponent, home_away, result\ndbl  (34): ncaa_id, team_score, opponent_score, s, kills, errors, total_atta...\ndate  (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nCode\nmaryland_stats &lt;- Stats |&gt;\n  filter(team == \"Maryland\") |&gt;\n  summarise(\n    Total_Kills = sum(kills, na.rm = TRUE),\n    Total_Blocks = sum(block_solos + block_assists / 2, na.rm = TRUE),\n    Total_Aces = sum(aces, na.rm = TRUE),\n    Total_Opponent_Errors = sum(opponent_score, na.rm = TRUE)\n  )\n\n\nIn 2024, Maryland has notched 127 aces! That’s a lot and good for best in the Big Ten Conference. How does that compare to another squad in the Big Ten that has performed better in conference play?\nBefore we answer that question let’s take a closer look at the distribution of all these Maryland stats.\n\n\nCode\nmd &lt;- c(\"Total_Kills\"=714, \"Total_Blocks\"=139, \"Total_Aces\"=127, \"Total_Opponent_Errors\"=20)\n\n\n\n\nCode\nwaffle(\n   md/4, \n        rows = 10, \n        title=\"Maryland's point distribution\", \n        xlab=\"1 square = 1 point\", \n        colors = c(\"black\", \"red\", \"yellow\", \"grey\")\n)\n\n\n\n\n\n\n\n\n\nAs expected, the kills far and away are the largest stat shown on screen. However, Maryland has picked up a slight identity in aces. For a team that used to block better than anyone in the nation, it’s surprising to see the aces and blocks nearly identical. Having the nation’s leader in aces per set, Samantha Schnitta, certainly helps.\nHow does Maryland stack up to another Big Ten team. Let’s use Indiana in this example.\n\n\nCode\nindiana_stats &lt;- Stats |&gt;\n  filter(team == \"Indiana\") |&gt;\n  summarise(\n    Total_Kills = sum(kills, na.rm = TRUE),\n    Total_Blocks = sum(block_solos + block_assists / 2, na.rm = TRUE),\n    Total_Aces = sum(aces, na.rm = TRUE),\n    Total_Opponent_Errors = sum(opponent_score, na.rm = TRUE)\n  )\n\n\n\n\nCode\niu &lt;- c(\"Total_Kills\"=677, \"Total_Blocks\"=114, \"Total_Aces\"=93, \"Total_Opponent_Errors\"=24)\n\n\n\n\nCode\nwaffle(\n   iu/4, \n        rows = 10, \n        title=\"Indiana's Point Distribution\", \n        xlab=\"1 square = 1 point\", \n        colors = c(\"red\", \"grey\", \"black\", \"orange\")\n)\n\n\n\n\n\n\n\n\n\nUnsurprisingly, Maryland and Indiana’s kill totals are fairly similar. Maryland holds the slight advantage in the offensive category. As for defensive work, the two squads aren’t far off either. Maryland’s 139 blocks is greater than Indiana’s 114, but on the chart it does not look like a significant difference. We can see a major difference is in service aces. Maryland has been excellent on the service ace, which is why it has 34 more than Indiana. We know this is a significant difference because Maryland’s 127 leads the conference, while Michigan in second only has 108. No knock on Indiana here serving; its ace total is good for 6th best in the nation’s top conference.\nOne last similarity visible is the opponent error totals. Indiana holds just a slim four-point advantage in that category. Overall, despite Maryland’s significant advantage in the ace department, it and Indiana are actually pretty similar in other aspects of point distribution. Maryland started off conference play with a rocky couple of losses at home. Indiana also dropped its first 2 conference matches to Oregon and Washington.\nIt seems odd that Maryland is so dominant compared to the rest of the star-studded conference in a difficult category such as the ace. Is it because of a weak out of conference schedule, which saw it go 9-2? The remainder of the season may answer these questions.\nThere is a lot of volleyball left to be played. It will be interesting to see if Maryland’s ace prowess can lead it to a signature win or two."
  }
]