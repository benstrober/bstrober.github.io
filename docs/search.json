[
  {
    "objectID": "posts/willard-teams/index.html",
    "href": "posts/willard-teams/index.html",
    "title": "Terps Historic Start Reveals Trends of Good Kevin Willard Teams",
    "section": "",
    "text": "Maryland basketball has won all 3 of its first games by 30 or more points for the first time in program history. Is it because of the schedule it has played? In short, the competition has’t been there yet, but when studying Maryland’s metrics compared to Kevin Willard’s teams at Seton Hall, there is very encouraging signs for the remainder of the year.\nWillard team’s, especially ones that made the NCAA tournament, have a history of forcing 11 or more turnovers per game. This year, they’re using their defense to absolutely overwhelm opponents. In addition, Maryland’s at an unbelieve able pace in terms of its efficicency differntial.\nOut of all the teams for Willard that have made the NCAA tournament, Maryland this season exceeds or matches those metrics.\nLet’s explore deeper.\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n\nCode\nlogs &lt;- read_csv(\"https://thescoop.org/sports-data-files/cbblogs1525.csv\")\n\n\nRows: 110084 Columns: 47\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (7): Season, Opponent, HomeAway, W_L, URL, Conference, Team\ndbl  (39): Game, TeamScore, OpponentScore, TeamFG, TeamFGA, TeamFGPCT, Team3...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nCode\nmaryland_data &lt;- logs |&gt;\n  filter(Team == \"Maryland\") |&gt;\n  filter(Season %in% c(\"2022-2023\", \"2023-2024\", \"2024-2025\"))\n\n\nsetonhall_data &lt;- logs |&gt;\n  filter(Team == \"Seton Hall\") |&gt;\n  filter(Season %in% c(\"2015-2016\", \"2016-2017\", \"2017-2018\",\"2018-2019\", \"2019-2020\", \"2020-2021\", \"2021-2022\"))\n\n\nNow that we have the data for Willard at Seton Hall and Maryland let’s see how they are similar.\n\n\nCode\nmaryland_mutated &lt;- maryland_data |&gt;  mutate(\n  Differential = TeamScore - OpponentScore,\n    Team3PtPct = Team3P / Team3PA * 100,\n    Opponent3PtPct = Opponent3P / Opponent3PA * 100,\n    TeamFGPct = TeamFG / TeamFGA * 100,\n    OpponentFGPct = OpponentFG / OpponentFGA * 100\n  ) \n\n stats &lt;- maryland_mutated |&gt;\n  group_by (Season)|&gt;\n  summarise(\n    FGAvg = mean(TeamFGPCT),\n    OppFGAvg = mean(OpponentFGPCT),\n    threePtPct = mean(Team3PPCT),\n    Ptdiff =mean(Differential),\n    Opp3ptPct =mean (Opponent3PPCT),\n    TO = mean(TeamTurnovers),\n    OppTO= mean(OpponentTurnovers),\n    TeamOffRebounds = mean (TeamOffRebounds),\n    OpponentOffRebounds = mean (OpponentOffRebounds)\n    \n    \n  )\n\n\nprint(maryland_data)\n\n\n# A tibble: 71 × 47\n   Season     Game Date       Opponent    HomeAway W_L   TeamScore OpponentScore\n   &lt;chr&gt;     &lt;dbl&gt; &lt;date&gt;     &lt;chr&gt;       &lt;chr&gt;    &lt;chr&gt;     &lt;dbl&gt;         &lt;dbl&gt;\n 1 2022-2023     1 2022-11-07 Niagara     &lt;NA&gt;     W            71            49\n 2 2022-2023     2 2022-11-10 Western Ca… &lt;NA&gt;     W            71            51\n 3 2022-2023     3 2022-11-15 Binghamton  &lt;NA&gt;     W            76            52\n 4 2022-2023     4 2022-11-19 Saint Louis N        W            95            67\n 5 2022-2023     5 2022-11-20 Miami (FL)  N        W            88            70\n 6 2022-2023     6 2022-11-25 Coppin Sta… &lt;NA&gt;     W            95            79\n 7 2022-2023     7 2022-11-29 Louisville  @        W            79            54\n 8 2022-2023     8 2022-12-02 Illinois    &lt;NA&gt;     W            71            66\n 9 2022-2023     9 2022-12-06 Wisconsin   @        L            59            64\n10 2022-2023    10 2022-12-11 Tennessee   N        L            53            56\n# ℹ 61 more rows\n# ℹ 39 more variables: TeamFG &lt;dbl&gt;, TeamFGA &lt;dbl&gt;, TeamFGPCT &lt;dbl&gt;,\n#   Team3P &lt;dbl&gt;, Team3PA &lt;dbl&gt;, Team3PPCT &lt;dbl&gt;, TeamFT &lt;dbl&gt;, TeamFTA &lt;dbl&gt;,\n#   TeamFTPCT &lt;dbl&gt;, TeamOffRebounds &lt;dbl&gt;, TeamTotalRebounds &lt;dbl&gt;,\n#   TeamAssists &lt;dbl&gt;, TeamSteals &lt;dbl&gt;, TeamBlocks &lt;dbl&gt;, TeamTurnovers &lt;dbl&gt;,\n#   TeamPersonalFouls &lt;dbl&gt;, OpponentFG &lt;dbl&gt;, OpponentFGA &lt;dbl&gt;,\n#   OpponentFGPCT &lt;dbl&gt;, Opponent3P &lt;dbl&gt;, Opponent3PA &lt;dbl&gt;, …\n\n\n\n\nCode\nsetonhall_mutated &lt;- setonhall_data |&gt;  mutate(\n  Differential = TeamScore - OpponentScore,\n    Team3PtPct = Team3P / Team3PA * 100,\n    Opponent3PtPct = Opponent3P / Opponent3PA * 100,\n    TeamFGPct = TeamFG / TeamFGA * 100,\n    OpponentFGPct = OpponentFG / OpponentFGA * 100\n  ) \n\n statshall &lt;- setonhall_mutated |&gt;\n  group_by (Season)|&gt;\n  summarise(\n    FGAvg = mean(TeamFGPCT),\n    OppFGAvg = mean(OpponentFGPCT),\n    threePtPct = mean(Team3PPCT),\n    Ptdiff =mean(Differential),\n    Opp3ptPct =mean (Opponent3PPCT),\n    TO = mean(TeamTurnovers),\n    OppTO= mean(OpponentTurnovers),\n    TeamOffRebounds = mean (TeamOffRebounds),\n    OpponentOffRebounds = mean (OpponentOffRebounds)\n    \n    \n  )\n\n\nprint(setonhall_data)\n\n\n# A tibble: 221 × 47\n   Season     Game Date       Opponent    HomeAway W_L   TeamScore OpponentScore\n   &lt;chr&gt;     &lt;dbl&gt; &lt;date&gt;     &lt;chr&gt;       &lt;chr&gt;    &lt;chr&gt;     &lt;dbl&gt;         &lt;dbl&gt;\n 1 2021-2022     1 2021-11-10 Fairleigh … &lt;NA&gt;     W            93            49\n 2 2021-2022     2 2021-11-14 Yale        &lt;NA&gt;     W            80            44\n 3 2021-2022     3 2021-11-16 Michigan    @        W            67            65\n 4 2021-2022     4 2021-11-22 Ohio State  N        L            76            79\n 5 2021-2022     5 2021-11-24 California  N        W            62            59\n 6 2021-2022     6 2021-11-28 Bethune-Co… &lt;NA&gt;     W            84            70\n 7 2021-2022     7 2021-12-01 Wagner      &lt;NA&gt;     W            85            63\n 8 2021-2022     8 2021-12-04 Nyack       &lt;NA&gt;     W           113            67\n 9 2021-2022     9 2021-12-09 Texas       &lt;NA&gt;     W            64            60\n10 2021-2022    10 2021-12-12 Rutgers     &lt;NA&gt;     W            77            63\n# ℹ 211 more rows\n# ℹ 39 more variables: TeamFG &lt;dbl&gt;, TeamFGA &lt;dbl&gt;, TeamFGPCT &lt;dbl&gt;,\n#   Team3P &lt;dbl&gt;, Team3PA &lt;dbl&gt;, Team3PPCT &lt;dbl&gt;, TeamFT &lt;dbl&gt;, TeamFTA &lt;dbl&gt;,\n#   TeamFTPCT &lt;dbl&gt;, TeamOffRebounds &lt;dbl&gt;, TeamTotalRebounds &lt;dbl&gt;,\n#   TeamAssists &lt;dbl&gt;, TeamSteals &lt;dbl&gt;, TeamBlocks &lt;dbl&gt;, TeamTurnovers &lt;dbl&gt;,\n#   TeamPersonalFouls &lt;dbl&gt;, OpponentFG &lt;dbl&gt;, OpponentFGA &lt;dbl&gt;,\n#   OpponentFGPCT &lt;dbl&gt;, Opponent3P &lt;dbl&gt;, Opponent3PA &lt;dbl&gt;, …\n\n\nNow that we have stats, let’s compare them in terms of advanced efficiency metrics.\n\n\nCode\nstats_efficiencymd &lt;- stats |&gt;\n  group_by(Season) |&gt;\n  summarise(\n    FGAvg = mean(FGAvg, na.rm = TRUE),\n    OppFGAvg = mean(OppFGAvg, na.rm = TRUE),\n    ThreePtPct = mean(threePtPct, na.rm = TRUE),\n    Opp3PtPct = mean(Opp3ptPct, na.rm = TRUE),\n    PtDiff = mean(Ptdiff, na.rm = TRUE),\n    TO = mean (TO, na.rm = TRUE),\n    OppTO = mean (OppTO, na.rm = TRUE),\n    TeamOffRebounds = mean (TeamOffRebounds, na.rm = TRUE),\n    OpponentOffRebounds = mean(OpponentOffRebounds, na.rm = TRUE)\n  ) |&gt;\n  mutate(\n    OffensiveEfficiency = (FGAvg + ThreePtPct + TO + TeamOffRebounds) / 2,\n    DefensiveEfficiency = (OppFGAvg + Opp3PtPct + OppTO + OpponentOffRebounds) / 2,\n     EfficiencyDifferential = (OffensiveEfficiency - DefensiveEfficiency) + PtDiff\n  )\n\n\n\n\nCode\nstats_efficiencysh &lt;- statshall |&gt;\n  group_by(Season) |&gt;\n  summarise(\n    FGAvg = mean(FGAvg, na.rm = TRUE),\n    OppFGAvg = mean(OppFGAvg, na.rm = TRUE),\n    ThreePtPct = mean(threePtPct, na.rm = TRUE),\n    Opp3PtPct = mean(Opp3ptPct, na.rm = TRUE),\n    PtDiff = mean(Ptdiff, na.rm = TRUE),\n    TO = mean (TO, na.rm = TRUE),\n    OppTO = mean (OppTO, na.rm = TRUE),\n    TeamOffRebounds = mean (TeamOffRebounds, na.rm = TRUE),\n    OpponentOffRebounds = mean(OpponentOffRebounds, na.rm = TRUE)\n  ) |&gt;\n  mutate(\n    OffensiveEfficiency = (FGAvg + ThreePtPct + TO + TeamOffRebounds) / 2,\n    DefensiveEfficiency = (OppFGAvg + Opp3PtPct + OppTO + OpponentOffRebounds) / 2,\n     EfficiencyDifferential = (OffensiveEfficiency - DefensiveEfficiency) + PtDiff\n  )\n\n\nAlthough a heatmap doesn’t tell the story, let’s see how efficient Kevin Willard has been at Maryland compared to Seton Hall.\n\n\nCode\nggplot(stats_efficiencymd, aes(x = Season, y = \"Efficiency Differential\", fill = EfficiencyDifferential)) +\n  geom_tile(color = \"white\") +\n  scale_fill_gradient(low = \"lightyellow\", high = \"darkred\", name = \"Efficiency\\nDifferential\") +\n  labs(\n    title = \"Maryland's efficiency under Willard thus far\",\n    x = \"Season\",\n    y = \"\"\n  ) +\n  theme_minimal() +\n  theme(axis.text.y = element_blank(),\n        axis.ticks.y = element_blank(),\n        axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\nLast year was obviously very poor for Willard. The team was great defensively, but really poor outputs offensively drove down the efficiency a ton, thus leading to Maryland’s first sub .500 season in 30 years.\n\n\nCode\nggplot(stats_efficiencysh, aes(x = Season, y = \"Efficiency Differential\", fill = EfficiencyDifferential)) +\n  geom_tile(color = \"white\") +\n  scale_fill_gradient(low = \"lightyellow\", high = \"darkred\", name = \"Efficiency\\nDifferential\") +\n  labs(\n    title = \"Willard at Seton Hall\",\n    x = \"Season\",\n    y = \"\"\n  ) +\n  theme_minimal() +\n  theme(axis.text.y = element_blank(),\n        axis.ticks.y = element_blank(),\n        axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\nThis isn’t enough to tell the story still. It’s interesting to see how these Willard teams actually did really well by these metrics. However, we need to look at the numbers and what exactly was the key. Additionally, 2021-2022, Seton Hall missed the tournament despite having very efficient numbers. 2018-2019 is also a missed tournament year and the efficiency was good. For the most part, Willard’s teams that have higher efficiency differentials usually make the tournament.\n\n\nCode\nefficiency_comparison &lt;- bind_rows(\n  stats_efficiencymd |&gt; mutate(Team = \"Maryland\"),\n  stats_efficiencysh |&gt; mutate(Team = \"Seton Hall\")\n)\n\n\nefficiency_comparison &lt;- efficiency_comparison |&gt;\n  select(Team, Season, OffensiveEfficiency, DefensiveEfficiency, EfficiencyDifferential, PtDiff, FGAvg, OppFGAvg, ThreePtPct, Opp3PtPct, TO, OppTO) |&gt;\n  arrange(Season, Team)\n\n\nprint(efficiency_comparison)\n\n\n# A tibble: 10 × 12\n   Team    Season OffensiveEfficiency DefensiveEfficiency EfficiencyDifferential\n   &lt;chr&gt;   &lt;chr&gt;                &lt;dbl&gt;               &lt;dbl&gt;                  &lt;dbl&gt;\n 1 Seton … 2015-…               12.9                12.0                    7.20\n 2 Seton … 2016-…               12.8                10.0                    5.68\n 3 Seton … 2017-…               11.9                10.9                    6.62\n 4 Seton … 2018-…               10.9                11.3                    1.51\n 5 Seton … 2019-…               11.3                12.0                    6.10\n 6 Seton … 2020-…               11.1                10.8                    1.96\n 7 Seton … 2021-…               11.6                10.8                    8.08\n 8 Maryla… 2022-…                9.82                9.82                   6.23\n 9 Maryla… 2023-…               11.0                10.2                    3.94\n10 Maryla… 2024-…                9.87               13.0                   28.5 \n# ℹ 7 more variables: PtDiff &lt;dbl&gt;, FGAvg &lt;dbl&gt;, OppFGAvg &lt;dbl&gt;,\n#   ThreePtPct &lt;dbl&gt;, Opp3PtPct &lt;dbl&gt;, TO &lt;dbl&gt;, OppTO &lt;dbl&gt;\n\n\nIt’s evident through looking a this. Willard’s teams have always forced at least 11 TO PG. Let’s visualize how it looks at Seton Hall and at Maryland.\n\n\nCode\nggplot() +\n  geom_line(data = stats_efficiencymd, aes(x = Season, y = OppTO, color = \"Maryland\"), size = 1) +\n  geom_line(data = stats_efficiencysh, aes(x = Season, y = OppTO, color = \"Seton Hall\"), size = 1) +\n  labs(title = \"Willard's teams make it tough to care for the ball\",\n       x = \"Season\", y = \"Opponent Turnovers (Opp TO)\") +\n  scale_color_manual(values = c(\"Maryland\" = \"blue\", \"Seton Hall\" = \"red\")) +\n  theme_minimal() +\n  theme(legend.position = \"top\") +\n  geom_point(data = stats_efficiencymd, aes(x = Season, y = OppTO), color = \"blue\", size = 3, alpha = 0.7) +\n  geom_point(data = stats_efficiencysh, aes(x = Season, y = OppTO), color = \"red\", size = 3, alpha = 0.7)\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_line()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n`geom_line()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n\n\n\n\n\n\n\n\n\nWillard’s teams have never had a problem forcing turnovers. It’s why his teams have usually been pretty sound defensively. In 2016, 17, 18 and 19, Willard’s teams made the NCAA tournament and those years saw the team at 12 or more OPP To per game.\nIn his first 2 years at Maryland, he did not reach that mark. However, the start of 2024 has him on track to do so.\nWhat else do we notice?\n\n\nCode\nggplot() +\n  geom_line(data = stats_efficiencymd, aes(x = Season, y = EfficiencyDifferential, color = \"Maryland\"), size = 1.2) +\n  geom_line(data = stats_efficiencysh, aes(x = Season, y = EfficiencyDifferential, color = \"Seton Hall\"), size = 1.2) +\n  labs(title = \"5 is the magic number for Kevin Willard\",\n       x = \"Season\", y = \"Efficiency Differential\") +\n  scale_color_manual(values = c(\"Maryland\" = \"blue\", \"Seton Hall\" = \"red\")) +\n  theme_minimal() +\n  theme(legend.position = \"top\") +\n  geom_point(data = stats_efficiencymd, aes(x = Season, y = EfficiencyDifferential), color = \"blue\", size = 3, alpha = 0.7) +\n  geom_point(data = stats_efficiencysh, aes(x = Season, y = EfficiencyDifferential), color = \"red\", size = 3, alpha = 0.7) +\n  geom_hline(yintercept = 0, linetype = \"dashed\", color = \"black\", size = 0.8) +\n  annotate(\"text\", x = 2, y = 1, label = \"Positive Differential\",)\n\n\n`geom_line()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n`geom_line()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n\n\n\n\n\n\n\n\n\nIn every year that a Willard team has made the NCAA tournament except for 2018-2019, Willard’s team has had an efficiency differential over five. Only twice in this data set has a Willard team missed the tournament after posting a +5 efficiency differential.\nIt’s only 3 games into the season, but Maryland’s efficiency differential is off the chart at 20+. Even when Maryland comes down to earth eventually as the schedule ramps up, they appear to be off to strong tendencies for Willard teams.\nMarquette is a big taste, we’ll revisit Maryland’s efficiency numbers after that game."
  },
  {
    "objectID": "posts/Volleyball Waffle Chart/index.html",
    "href": "posts/Volleyball Waffle Chart/index.html",
    "title": "Maryland dominates the Big Ten in aces. Why not the win column?",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(waffle)\nlibrary(dplyr)\n\n\n\n\nCode\nStats &lt;- read_csv(\"https://raw.githubusercontent.com/dwillis/NCAAWomensVolleyballData/main/data/ncaa_womens_volleyball_matchstats_2024.csv\")\n\n\nRows: 5235 Columns: 39\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (4): team, opponent, home_away, result\ndbl  (34): ncaa_id, team_score, opponent_score, s, kills, errors, total_atta...\ndate  (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nCode\nmaryland_stats &lt;- Stats |&gt;\n  filter(team == \"Maryland\") |&gt;\n  summarise(\n    Total_Kills = sum(kills, na.rm = TRUE),\n    Total_Blocks = sum(block_solos + block_assists / 2, na.rm = TRUE),\n    Total_Aces = sum(aces, na.rm = TRUE),\n    Total_Opponent_Errors = sum(opponent_score, na.rm = TRUE)\n  )\n\n\nIn 2024, Maryland has notched 127 aces! That’s a lot and good for best in the Big Ten Conference. How does that compare to another squad in the Big Ten that has performed better in conference play?\nBefore we answer that question let’s take a closer look at the distribution of all these Maryland stats.\n\n\nCode\nmd &lt;- c(\"Total_Kills\"=714, \"Total_Blocks\"=139, \"Total_Aces\"=127, \"Total_Opponent_Errors\"=20)\n\n\n\n\nCode\nwaffle(\n   md/4, \n        rows = 10, \n        title=\"Maryland's point distribution\", \n        xlab=\"1 square = 1 point\", \n        colors = c(\"black\", \"red\", \"yellow\", \"grey\")\n)\n\n\n\n\n\n\n\n\n\nAs expected, the kills far and away are the largest stat shown on screen. However, Maryland has picked up a slight identity in aces. For a team that used to block better than anyone in the nation, it’s surprising to see the aces and blocks nearly identical. Having the nation’s leader in aces per set, Samantha Schnitta, certainly helps.\nHow does Maryland stack up to another Big Ten team. Let’s use Indiana in this example.\n\n\nCode\nindiana_stats &lt;- Stats |&gt;\n  filter(team == \"Indiana\") |&gt;\n  summarise(\n    Total_Kills = sum(kills, na.rm = TRUE),\n    Total_Blocks = sum(block_solos + block_assists / 2, na.rm = TRUE),\n    Total_Aces = sum(aces, na.rm = TRUE),\n    Total_Opponent_Errors = sum(opponent_score, na.rm = TRUE)\n  )\n\n\n\n\nCode\niu &lt;- c(\"Total_Kills\"=677, \"Total_Blocks\"=114, \"Total_Aces\"=93, \"Total_Opponent_Errors\"=24)\n\n\n\n\nCode\nwaffle(\n   iu/4, \n        rows = 10, \n        title=\"Indiana's Point Distribution\", \n        xlab=\"1 square = 1 point\", \n        colors = c(\"red\", \"grey\", \"black\", \"orange\")\n)\n\n\n\n\n\n\n\n\n\nUnsurprisingly, Maryland and Indiana’s kill totals are fairly similar. Maryland holds the slight advantage in the offensive category. As for defensive work, the two squads aren’t far off either. Maryland’s 139 blocks is greater than Indiana’s 114, but on the chart it does not look like a significant difference. We can see a major difference is in service aces. Maryland has been excellent on the service ace, which is why it has 34 more than Indiana. We know this is a significant difference because Maryland’s 127 leads the conference, while Michigan in second only has 108. No knock on Indiana here serving; its ace total is good for 6th best in the nation’s top conference.\nOne last similarity visible is the opponent error totals. Indiana holds just a slim four-point advantage in that category. Overall, despite Maryland’s significant advantage in the ace department, it and Indiana are actually pretty similar in other aspects of point distribution. Maryland started off conference play with a rocky couple of losses at home. Indiana also dropped its first 2 conference matches to Oregon and Washington.\nIt seems odd that Maryland is so dominant compared to the rest of the star-studded conference in a difficult category such as the ace. Is it because of a weak out of conference schedule, which saw it go 9-2? The remainder of the season may answer these questions.\nThere is a lot of volleyball left to be played. It will be interesting to see if Maryland’s ace prowess can lead it to a signature win or two."
  },
  {
    "objectID": "posts/Running/index.html",
    "href": "posts/Running/index.html",
    "title": "Blaming Billy? Blame Maryland’s Inability to run the Ball.",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(ggplot2)\nlogs &lt;- read_csv(\"https://www.thescoop.org/sports-data-files/footballlogs24.csv\")\n\n\nRows: 1136 Columns: 54\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (45): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nbig_ten_data &lt;- logs |&gt;\n  mutate(GameTick = as.character(Game))|&gt;\n  filter (Conference == \"Big Ten Conference\") |&gt;\n  mutate(Month = month(Date),\n       (GameTick =as.character(Game)))|&gt;\n  group_by(Month, RushingAvg)\naverages &lt;- big_ten_data |&gt;\n  group_by(Date, TeamFull) |&gt;\n  summarise(RushingAvg = mean(RushingAvg))\n\n\n`summarise()` has grouped output by 'Date'. You can override using the\n`.groups` argument.\n\n\nCode\nbig_ten_data |&gt; summarise(mean(RushingAvg))\n\n\n`summarise()` has grouped output by 'Month'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 108 × 3\n# Groups:   Month [4]\n   Month RushingAvg `mean(RushingAvg)`\n   &lt;dbl&gt;      &lt;dbl&gt;              &lt;dbl&gt;\n 1     8        2.4                2.4\n 2     8        2.9                2.9\n 3     8        3.6                3.6\n 4     8        4.3                4.3\n 5     8        4.4                4.4\n 6     8        4.7                4.7\n 7     8        4.8                4.8\n 8     8        5.2                5.2\n 9     8        5.3                5.3\n10     8        5.4                5.4\n# ℹ 98 more rows\n\n\nCode\nggplot() + \n  geom_hline(yintercept = 4.362821, color = \"blue\") + \n  geom_line(data = big_ten_data, aes(x = GameTick, y = RushingAvg, group = TeamFull)) + \n  scale_y_continuous(limits = c(-1.5, 9)) + \n  facet_wrap(~ TeamFull) + \n  labs(title = \"Maryland hasn't lived up to 'The Standard' of Big Ten Rushing\") +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\n\n\n\n\n\n\nIt’s been a rough season for Maryland football. After brutal blowout losses to Northwestern and Minnesota, offensive struggles have become the focus of attention.\nWhile many direct blame at Maryland’s new quarterback Billy Edwards Jr., he’s not the problem. The Terps’ inability to rush the ball well compared to their Big Ten peers is why their offense has plundered.\nThe Big Ten’s rushing average per attempt is 4.36 yards. Maryland has severely struggled to reach that margin, and hasn’t done so in a single Big Ten game.\nAccording to data for all Big Ten teams rushing averages, Maryland has only rushed at the conference average in 2 games this season. Against who? Villanova and UCONN. Against every other opponent, Maryland has been a below average rushing team compared to other Big Ten opponents.\nLet’s put this into perspective with other top-tier Big Ten teams. Oregon, Penn State, Indiana and Ohio State, have all consistently been above the conference average running the football. Maryland’s next opponent is No. 1 Oregon on Saturday. Given that this match up features a very effect rushing team against one that isn’t at all, the odds are stacked against Maryland on the road.\nWhile running the ball is a good indicator of how good a team is, some teams don’t fit this narrative in the Big Ten.\nInterestingly, USC and Purdue have struggled this year, but it’s apparent rushing hasn’t been the biggest issue for those teams. Most of the data indicates teams that run the ball effectively compared to the conference average perform well.\nAnother clear piece of evidence is within UCLA’s data. UCLA, who has been one of the worst offensive teams in the Big Ten, have seen absolute futility rushing the football compared to the Big Ten Average.\nIf Maryland wants any possibility at making a fourth-straight bowl game, the rushing attacks needs a late-season resurgence."
  },
  {
    "objectID": "posts/nba-lineups/index.html",
    "href": "posts/nba-lineups/index.html",
    "title": "Wizards lineup tendencies reveal commitment to developing youth",
    "section": "",
    "text": "The Washington Wizards are 2-11 and have lost nine games in a row. Yes, this was expected, but this losing streak has looked extra bad. Most of the games have not been competitive, which is frustrating to fans even though it’s very obvious they are tanking.\nHow strategic is this tank? Data suggests that the Wizards aren’t playing their best lineups very often, and that might just be what Washington’s plan is. With a ton of young core talent looking to develop as future cornerstone pieces, the Wizards appear willing to let them go through the growing pains.\nLet’s explore this.\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(hoopR)\n\n\nWarning: package 'hoopR' was built under R version 4.4.2\n\n\n\n\nCode\nteam_id &lt;- 1610612764\n\nlineups &lt;- nba_leaguedashlineups(team_id = team_id, season = \"2024-25\")\n\neveryone &lt;- nba_leaguedashlineups(season = \"2024-25\")\n\ncurrent_wiz &lt;- lineups [[1]]\neveryonenba &lt;- everyone [[1]]\n\n\n\n\nCode\ncurrent_wiz |&gt;\n  group_by(GROUP_NAME, PLUS_MINUS, MIN)\n\n\n# A tibble: 95 × 57\n# Groups:   GROUP_NAME, PLUS_MINUS, MIN [95]\n   GROUP_SET GROUP_ID     GROUP_NAME TEAM_ID TEAM_ABBREVIATION GP    W     L    \n   &lt;chr&gt;     &lt;chr&gt;        &lt;chr&gt;      &lt;chr&gt;   &lt;chr&gt;             &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n 1 Lineups   -1628398-16… K. Kuzma … 161061… WAS               7     1     6    \n 2 Lineups   -1629673-16… J. Poole … 161061… WAS               7     1     6    \n 3 Lineups   -202685-162… J. Valanč… 161061… WAS               10    2     8    \n 4 Lineups   -1630557-16… C. Kisper… 161061… WAS               9     1     8    \n 5 Lineups   -202685-163… J. Valanč… 161061… WAS               10    2     8    \n 6 Lineups   -202685-162… J. Valanč… 161061… WAS               4     0     4    \n 7 Lineups   -1628963-16… M. Bagley… 161061… WAS               4     0     4    \n 8 Lineups   -202685-162… J. Valanč… 161061… WAS               4     1     3    \n 9 Lineups   -1629673-16… J. Poole … 161061… WAS               4     0     4    \n10 Lineups   -1628398-16… K. Kuzma … 161061… WAS               4     1     3    \n# ℹ 85 more rows\n# ℹ 49 more variables: W_PCT &lt;chr&gt;, MIN &lt;chr&gt;, FGM &lt;chr&gt;, FGA &lt;chr&gt;,\n#   FG_PCT &lt;chr&gt;, FG3M &lt;chr&gt;, FG3A &lt;chr&gt;, FG3_PCT &lt;chr&gt;, FTM &lt;chr&gt;, FTA &lt;chr&gt;,\n#   FT_PCT &lt;chr&gt;, OREB &lt;chr&gt;, DREB &lt;chr&gt;, REB &lt;chr&gt;, AST &lt;chr&gt;, TOV &lt;chr&gt;,\n#   STL &lt;chr&gt;, BLK &lt;chr&gt;, BLKA &lt;chr&gt;, PF &lt;chr&gt;, PFD &lt;chr&gt;, PTS &lt;chr&gt;,\n#   PLUS_MINUS &lt;chr&gt;, GP_RANK &lt;chr&gt;, W_RANK &lt;chr&gt;, L_RANK &lt;chr&gt;,\n#   W_PCT_RANK &lt;chr&gt;, MIN_RANK &lt;chr&gt;, FGM_RANK &lt;chr&gt;, FGA_RANK &lt;chr&gt;, …\n\n\nCode\ncurrent_wiz &lt;- current_wiz |&gt; mutate(number = row_number(GROUP_NAME))\n \n\n\ncurrent_wiz |&gt;\n  arrange(desc(MIN)) |&gt;\n  head(10)\n\n\n# A tibble: 10 × 58\n   GROUP_SET GROUP_ID     GROUP_NAME TEAM_ID TEAM_ABBREVIATION GP    W     L    \n   &lt;chr&gt;     &lt;chr&gt;        &lt;chr&gt;      &lt;chr&gt;   &lt;chr&gt;             &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n 1 Lineups   -202685-162… J. Valanč… 161061… WAS               5     1     4    \n 2 Lineups   -202685-162… J. Valanč… 161061… WAS               4     1     3    \n 3 Lineups   -1628398-16… K. Kuzma … 161061… WAS               4     1     3    \n 4 Lineups   -202685-163… J. Valanč… 161061… WAS               4     0     4    \n 5 Lineups   -1628398-16… K. Kuzma … 161061… WAS               3     0     3    \n 6 Lineups   -1628398-16… K. Kuzma … 161061… WAS               7     1     6    \n 7 Lineups   -1626158-16… R. Holmes… 161061… WAS               2     0     2    \n 8 Lineups   -202685-162… J. Valanč… 161061… WAS               2     0     2    \n 9 Lineups   -1629673-16… J. Poole … 161061… WAS               7     1     6    \n10 Lineups   -1630215-16… J. Butler… 161061… WAS               2     0     2    \n# ℹ 50 more variables: W_PCT &lt;chr&gt;, MIN &lt;chr&gt;, FGM &lt;chr&gt;, FGA &lt;chr&gt;,\n#   FG_PCT &lt;chr&gt;, FG3M &lt;chr&gt;, FG3A &lt;chr&gt;, FG3_PCT &lt;chr&gt;, FTM &lt;chr&gt;, FTA &lt;chr&gt;,\n#   FT_PCT &lt;chr&gt;, OREB &lt;chr&gt;, DREB &lt;chr&gt;, REB &lt;chr&gt;, AST &lt;chr&gt;, TOV &lt;chr&gt;,\n#   STL &lt;chr&gt;, BLK &lt;chr&gt;, BLKA &lt;chr&gt;, PF &lt;chr&gt;, PFD &lt;chr&gt;, PTS &lt;chr&gt;,\n#   PLUS_MINUS &lt;chr&gt;, GP_RANK &lt;chr&gt;, W_RANK &lt;chr&gt;, L_RANK &lt;chr&gt;,\n#   W_PCT_RANK &lt;chr&gt;, MIN_RANK &lt;chr&gt;, FGM_RANK &lt;chr&gt;, FGA_RANK &lt;chr&gt;,\n#   FG_PCT_RANK &lt;chr&gt;, FG3M_RANK &lt;chr&gt;, FG3A_RANK &lt;chr&gt;, FG3_PCT_RANK &lt;chr&gt;, …\n\n\nCode\ncurrent_wiz |&gt;\n  arrange(desc(PLUS_MINUS))|&gt;\n  head(10)\n\n\n# A tibble: 10 × 58\n   GROUP_SET GROUP_ID     GROUP_NAME TEAM_ID TEAM_ABBREVIATION GP    W     L    \n   &lt;chr&gt;     &lt;chr&gt;        &lt;chr&gt;      &lt;chr&gt;   &lt;chr&gt;             &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n 1 Lineups   -1628398-16… K. Kuzma … 161061… WAS               3     0     3    \n 2 Lineups   -202685-162… J. Valanč… 161061… WAS               4     1     3    \n 3 Lineups   -1628398-16… K. Kuzma … 161061… WAS               3     0     3    \n 4 Lineups   -202685-162… J. Valanč… 161061… WAS               2     0     2    \n 5 Lineups   -1628398-16… K. Kuzma … 161061… WAS               1     0     1    \n 6 Lineups   -1628963-16… M. Bagley… 161061… WAS               4     0     4    \n 7 Lineups   -1629673-16… J. Poole … 161061… WAS               5     2     3    \n 8 Lineups   -1629673-16… J. Poole … 161061… WAS               1     0     1    \n 9 Lineups   -202685-162… J. Valanč… 161061… WAS               2     0     2    \n10 Lineups   -202685-163… J. Valanč… 161061… WAS               1     0     1    \n# ℹ 50 more variables: W_PCT &lt;chr&gt;, MIN &lt;chr&gt;, FGM &lt;chr&gt;, FGA &lt;chr&gt;,\n#   FG_PCT &lt;chr&gt;, FG3M &lt;chr&gt;, FG3A &lt;chr&gt;, FG3_PCT &lt;chr&gt;, FTM &lt;chr&gt;, FTA &lt;chr&gt;,\n#   FT_PCT &lt;chr&gt;, OREB &lt;chr&gt;, DREB &lt;chr&gt;, REB &lt;chr&gt;, AST &lt;chr&gt;, TOV &lt;chr&gt;,\n#   STL &lt;chr&gt;, BLK &lt;chr&gt;, BLKA &lt;chr&gt;, PF &lt;chr&gt;, PFD &lt;chr&gt;, PTS &lt;chr&gt;,\n#   PLUS_MINUS &lt;chr&gt;, GP_RANK &lt;chr&gt;, W_RANK &lt;chr&gt;, L_RANK &lt;chr&gt;,\n#   W_PCT_RANK &lt;chr&gt;, MIN_RANK &lt;chr&gt;, FGM_RANK &lt;chr&gt;, FGA_RANK &lt;chr&gt;,\n#   FG_PCT_RANK &lt;chr&gt;, FG3M_RANK &lt;chr&gt;, FG3A_RANK &lt;chr&gt;, FG3_PCT_RANK &lt;chr&gt;, …\n\n\nHere is the top-ten lineups for the Wizards based on plus-minus differential. As revealed by this data. The Wizards severely lack lineups that even consistently produce positive outputs. However, the lineups that actually do don’t appear to be playing many minutes at all.\n\n\nCode\ncurrent_wiz &lt;- current_wiz |&gt;\n  arrange(desc(PLUS_MINUS)) |&gt;  \n  mutate(Number = row_number()) \n\n\nAccording to this data, the Wizards’ best lineup plus minus differential wise has only played on the floor a total of five minutes together this season.\n\n\nCode\n current_wiz |&gt; filter(GROUP_NAME == \"K. Kuzma - J. Poole - B. Coulibaly - A. Sarr - C. Carrington\")\n\n\n# A tibble: 1 × 59\n  GROUP_SET GROUP_ID      GROUP_NAME TEAM_ID TEAM_ABBREVIATION GP    W     L    \n  &lt;chr&gt;     &lt;chr&gt;         &lt;chr&gt;      &lt;chr&gt;   &lt;chr&gt;             &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n1 Lineups   -1628398-162… K. Kuzma … 161061… WAS               7     1     6    \n# ℹ 51 more variables: W_PCT &lt;chr&gt;, MIN &lt;chr&gt;, FGM &lt;chr&gt;, FGA &lt;chr&gt;,\n#   FG_PCT &lt;chr&gt;, FG3M &lt;chr&gt;, FG3A &lt;chr&gt;, FG3_PCT &lt;chr&gt;, FTM &lt;chr&gt;, FTA &lt;chr&gt;,\n#   FT_PCT &lt;chr&gt;, OREB &lt;chr&gt;, DREB &lt;chr&gt;, REB &lt;chr&gt;, AST &lt;chr&gt;, TOV &lt;chr&gt;,\n#   STL &lt;chr&gt;, BLK &lt;chr&gt;, BLKA &lt;chr&gt;, PF &lt;chr&gt;, PFD &lt;chr&gt;, PTS &lt;chr&gt;,\n#   PLUS_MINUS &lt;chr&gt;, GP_RANK &lt;chr&gt;, W_RANK &lt;chr&gt;, L_RANK &lt;chr&gt;,\n#   W_PCT_RANK &lt;chr&gt;, MIN_RANK &lt;chr&gt;, FGM_RANK &lt;chr&gt;, FGA_RANK &lt;chr&gt;,\n#   FG_PCT_RANK &lt;chr&gt;, FG3M_RANK &lt;chr&gt;, FG3A_RANK &lt;chr&gt;, FG3_PCT_RANK &lt;chr&gt;, …\n\n\nThis lineup consists of 2 rookies, a 2nd year player and two players who aren’t as young but not relatively old. This lineup has played far and away the most minutes this year at 75.Their plus-minus is -59, which is really really bad. However, these lineups allow some of these young players to learn the NBA game while also providing some veteran presence on the court with them.\n\n\nCode\nwiz_filtered &lt;- current_wiz |&gt; filter(MIN &gt; 0) |&gt; \n  arrange(desc(PLUS_MINUS)) |&gt;\n  slice(1:10) \n\nwiz_filtered |&gt; mutate(Number = row_number()) \n\n\n# A tibble: 10 × 59\n   GROUP_SET GROUP_ID     GROUP_NAME TEAM_ID TEAM_ABBREVIATION GP    W     L    \n   &lt;chr&gt;     &lt;chr&gt;        &lt;chr&gt;      &lt;chr&gt;   &lt;chr&gt;             &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n 1 Lineups   -1628398-16… K. Kuzma … 161061… WAS               3     0     3    \n 2 Lineups   -202685-162… J. Valanč… 161061… WAS               4     1     3    \n 3 Lineups   -1628398-16… K. Kuzma … 161061… WAS               3     0     3    \n 4 Lineups   -202685-162… J. Valanč… 161061… WAS               2     0     2    \n 5 Lineups   -1628398-16… K. Kuzma … 161061… WAS               1     0     1    \n 6 Lineups   -1628963-16… M. Bagley… 161061… WAS               4     0     4    \n 7 Lineups   -1629673-16… J. Poole … 161061… WAS               5     2     3    \n 8 Lineups   -1629673-16… J. Poole … 161061… WAS               1     0     1    \n 9 Lineups   -202685-162… J. Valanč… 161061… WAS               2     0     2    \n10 Lineups   -202685-163… J. Valanč… 161061… WAS               1     0     1    \n# ℹ 51 more variables: W_PCT &lt;chr&gt;, MIN &lt;chr&gt;, FGM &lt;chr&gt;, FGA &lt;chr&gt;,\n#   FG_PCT &lt;chr&gt;, FG3M &lt;chr&gt;, FG3A &lt;chr&gt;, FG3_PCT &lt;chr&gt;, FTM &lt;chr&gt;, FTA &lt;chr&gt;,\n#   FT_PCT &lt;chr&gt;, OREB &lt;chr&gt;, DREB &lt;chr&gt;, REB &lt;chr&gt;, AST &lt;chr&gt;, TOV &lt;chr&gt;,\n#   STL &lt;chr&gt;, BLK &lt;chr&gt;, BLKA &lt;chr&gt;, PF &lt;chr&gt;, PFD &lt;chr&gt;, PTS &lt;chr&gt;,\n#   PLUS_MINUS &lt;chr&gt;, GP_RANK &lt;chr&gt;, W_RANK &lt;chr&gt;, L_RANK &lt;chr&gt;,\n#   W_PCT_RANK &lt;chr&gt;, MIN_RANK &lt;chr&gt;, FGM_RANK &lt;chr&gt;, FGA_RANK &lt;chr&gt;,\n#   FG_PCT_RANK &lt;chr&gt;, FG3M_RANK &lt;chr&gt;, FG3A_RANK &lt;chr&gt;, FG3_PCT_RANK &lt;chr&gt;, …\n\n\nCode\nprint(wiz_filtered)\n\n\n# A tibble: 10 × 59\n   GROUP_SET GROUP_ID     GROUP_NAME TEAM_ID TEAM_ABBREVIATION GP    W     L    \n   &lt;chr&gt;     &lt;chr&gt;        &lt;chr&gt;      &lt;chr&gt;   &lt;chr&gt;             &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n 1 Lineups   -1628398-16… K. Kuzma … 161061… WAS               3     0     3    \n 2 Lineups   -202685-162… J. Valanč… 161061… WAS               4     1     3    \n 3 Lineups   -1628398-16… K. Kuzma … 161061… WAS               3     0     3    \n 4 Lineups   -202685-162… J. Valanč… 161061… WAS               2     0     2    \n 5 Lineups   -1628398-16… K. Kuzma … 161061… WAS               1     0     1    \n 6 Lineups   -1628963-16… M. Bagley… 161061… WAS               4     0     4    \n 7 Lineups   -1629673-16… J. Poole … 161061… WAS               5     2     3    \n 8 Lineups   -1629673-16… J. Poole … 161061… WAS               1     0     1    \n 9 Lineups   -202685-162… J. Valanč… 161061… WAS               2     0     2    \n10 Lineups   -202685-163… J. Valanč… 161061… WAS               1     0     1    \n# ℹ 51 more variables: W_PCT &lt;chr&gt;, MIN &lt;chr&gt;, FGM &lt;chr&gt;, FGA &lt;chr&gt;,\n#   FG_PCT &lt;chr&gt;, FG3M &lt;chr&gt;, FG3A &lt;chr&gt;, FG3_PCT &lt;chr&gt;, FTM &lt;chr&gt;, FTA &lt;chr&gt;,\n#   FT_PCT &lt;chr&gt;, OREB &lt;chr&gt;, DREB &lt;chr&gt;, REB &lt;chr&gt;, AST &lt;chr&gt;, TOV &lt;chr&gt;,\n#   STL &lt;chr&gt;, BLK &lt;chr&gt;, BLKA &lt;chr&gt;, PF &lt;chr&gt;, PFD &lt;chr&gt;, PTS &lt;chr&gt;,\n#   PLUS_MINUS &lt;chr&gt;, GP_RANK &lt;chr&gt;, W_RANK &lt;chr&gt;, L_RANK &lt;chr&gt;,\n#   W_PCT_RANK &lt;chr&gt;, MIN_RANK &lt;chr&gt;, FGM_RANK &lt;chr&gt;, FGA_RANK &lt;chr&gt;,\n#   FG_PCT_RANK &lt;chr&gt;, FG3M_RANK &lt;chr&gt;, FG3A_RANK &lt;chr&gt;, FG3_PCT_RANK &lt;chr&gt;, …\n\n\nNow that the data is filtered, we get some new numbers on plus-minus differential. Finally, a lineup is in the double digits! The bad news, that lineup is filled with veteran players and just one rookie. That’s likely why they are the most effective. However, in a rebuilding year, fans would not be happy to see this lineup playing the most minutes. It’s about developing the young players right now, which the Wizards seem committed to doing.\n\n\nCode\nggplot(wiz_filtered, aes(x = MIN, y = PLUS_MINUS)) +\n  geom_point(size = 4, color = \"blue\") +\n  geom_text(aes(label = PLUS_MINUS), hjust = 1.1, vjust = -0.5, size = 3) +\n  labs(\n    title = \"The Wizards' most efficent lineups don't play together enough\",\n    x = \"Minutes Played\",\n    y = \"Plus-Minus Differential\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nThis chart reveals the amount of total minutes played between the Wizards’ most efficent lineups. Given how poor the Wizards have been, they don’t have a lot of lineups with a positive plus minus differential. However, the lineup of J. Valančiūnas - M. Brogdon - K. Kuzma - C. Kispert - K. George is the only lineup in the double digits. The numbers on the screen indicate the plus-minus differential, revealing the Wizards’ best lineups don’t play very minutes together. This lineup is composed of mostly veteran players and just one rookie.\nThe Wizards are in a full rebuild. With that being said, it’s important to play the young players because winning these games isn’t necessarily important in terms of what the organization needs to do right now. However, you can’t help but think they might be winning more games if they played these more efficient lineups. The same thing can be said on the other side, though. If these lineups played as many minutes as the top lineups, would they also have a negative differential?\nEither way, it doesn’t matter. The Wizards have proved they are committed to developing key young players they have recently drafted. During a year with a deep draft class, this is exactly what fans should want. Yes, the losses are painful, but a year of mediocrity and lack of development would set this team back similarly to 2018-2022."
  },
  {
    "objectID": "posts/Football/index.html",
    "href": "posts/Football/index.html",
    "title": "Defensive Regression Haults Maryland football’s Progression",
    "section": "",
    "text": "Maryland football has had a rocky 2024 season. Although it’s not over yet, an improvement from back-to-back 8 win seasons looks out of the question.\nDefense has been the problem. Read more to find out what exactly that entails.\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(ggrepel)\n\n\n\n\nCode\nlogs &lt;- read_csv(\"https://thescoop.org/sports-data-files/footballlogs1124.csv\")\n\n\nRows: 21592 Columns: 55\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (46): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nCode\nwinlosslogs &lt;- logs |&gt; \n  mutate(\n    wins = case_when(\n      grepl(\"W\", Outcome) ~ 1, \n      grepl(\"L\", Outcome) ~ 0)\n)\n\n\n\n\nCode\nwinlosslogs |&gt; \n  filter(Team == \"Maryland\")|&gt;\n  group_by(Season) |&gt; \n   summarise(\n    TotalPlays = sum(OffensivePlays), \n    TotalYards = sum(OffensiveYards), \n    DefensivePlays = sum(DefPlays), \n    DefensiveYards = sum(DefYards), \n    TotalWins = sum(wins)) |&gt; \n  mutate(\n    OffensiveYPP = TotalYards/TotalPlays, \n    DefensiveYPP = DefensiveYards/DefensivePlays) -&gt; ypp\n\n\nThis reveals the average YPP offensively and defensively since 2011. As revealed in the data, Maryland played its best defense in the 13 year span during 2023.\n\n\nCode\nggplot() + \n  geom_point(\n    data=ypp, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins),\n    alpha = .3) + \n  scale_size(range = c(3, 8), name=\"Wins\")\n\n\n\n\n\n\n\n\n\n\n\nCode\nypp |&gt; \n  ungroup() |&gt; \n  summarise(\n    offense = mean(OffensiveYPP), \n    defense = mean(DefensiveYPP)\n    )\n\n\n# A tibble: 1 × 2\n  offense defense\n    &lt;dbl&gt;   &lt;dbl&gt;\n1    5.62    5.45\n\n\nOffensively, Maryland’s overall outputs have been slightly better than defense. However, Maryland’s best seasons have come when the defense performed as well as just under 5 yards per play.\n\n\nCode\nggplot() + \n  geom_point(\n    data=ypp, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"red\")+\n    geom_vline(xintercept = 5.617601) + \n  geom_hline(yintercept = 5.45072) +\n geom_text_repel(\n    data=ypp, \n    aes(x=OffensiveYPP, y=DefensiveYPP, label=Season) )+\n  \n  labs(title=\"Maryland's Defense has prevented the program from taking the next step.\", caption=\"Source: NCAA | By Ben Strober\")  + theme_minimal() + \n  theme(\n    plot.title = element_text(size = 12, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    )\n\n\n\n\n\n\n\n\n\nAfter 2023’s eight win season, a replication of that appears unlikely for Maryland football. Despite similar offensive outputs to last year’ season, Maryland football’s defense has taken a massive step back.\nIn 2023, Maryland allowed under 5 yards per play, according to NCAA. However, in 2024, Maryland’s defense is allowing over 5.5.\n2023’s defensive numbers was the lowest since 2011, and only the 2nd time the program held opponents under 5 yards per play in that span.\nIn 4 of the 5 years Maryland won at least 7 games, the defense held opponents under 5.5 yards per play on average, according to the data.\nMaryland still has 5 games to play and a chance to reach a fourth-straight bowl, but with No. 1 Oregon and Penn State on the schedule, its defensive number suggest they will struggle against these teams."
  },
  {
    "objectID": "posts/Commanders-goated/index.html",
    "href": "posts/Commanders-goated/index.html",
    "title": "Commanders are actually good?",
    "section": "",
    "text": "My first post\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nattendance &lt;- read_csv(\"https://dwillis.github.io/sports-data-files/attendance.csv\")\n\n\nRows: 146 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): Institution, Conference\ndbl (11): 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "posts/big-ten-plays/index.html",
    "href": "posts/big-ten-plays/index.html",
    "title": "Despite changes to clock stoppage, Big Ten teams see similar amount of offensive plays",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\n plays_2023 &lt;- read_csv(\"https://dwillis.github.io/sports-data-files/footballlogs23.csv\")\n\n\nRows: 1702 Columns: 54\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (45): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\n plays_2024 &lt;- read_csv(\"https://dwillis.github.io/sports-data-files/footballlogs24.csv\")\n\n\nRows: 704 Columns: 54\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (45): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nCode\n  bigten23 &lt;- plays_2023 |&gt;  filter(Conference == \"Big Ten Conference\")\n  bigten24 &lt;- plays_2024 |&gt;  filter(Conference == \"Big Ten Conference\")\n\n\nHere we can see the results from the data just involving the Big Ten Conference.\n\n\nCode\nbigten23 |&gt; group_by(OffensivePlays)\n\n\n# A tibble: 180 × 54\n# Groups:   OffensivePlays [39]\n    Game Date       HomeAway Opponent    Result PassingCmp PassingAtt PassingPct\n   &lt;dbl&gt; &lt;date&gt;     &lt;chr&gt;    &lt;chr&gt;       &lt;chr&gt;       &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;\n 1     1 2023-09-02 &lt;NA&gt;     East Carol… W (30…         26         31       83.9\n 2     2 2023-09-09 &lt;NA&gt;     Nevada-Las… W (35…         23         28       82.1\n 3     3 2023-09-16 &lt;NA&gt;     Bowling Gr… W (31…          8         13       61.5\n 4     4 2023-09-23 &lt;NA&gt;     Rutgers     W (31…         15         21       71.4\n 5     5 2023-09-30 @        Nebraska    W (45…         16         23       69.6\n 6     6 2023-10-07 @        Minnesota   W (52…         16         23       69.6\n 7     7 2023-10-14 &lt;NA&gt;     Indiana     W (52…         19         22       86.4\n 8     8 2023-10-21 @        Michigan S… W (49…         28         35       80  \n 9     9 2023-11-04 &lt;NA&gt;     Purdue      W (41…         24         37       64.9\n10    10 2023-11-11 @        Penn State  W (24…          7          8       87.5\n# ℹ 170 more rows\n# ℹ 46 more variables: PassingYds &lt;dbl&gt;, PassingTD &lt;dbl&gt;, RushingAtt &lt;dbl&gt;,\n#   RushingYds &lt;dbl&gt;, RushingAvg &lt;dbl&gt;, RushingTD &lt;dbl&gt;, OffensivePlays &lt;dbl&gt;,\n#   OffensiveYards &lt;dbl&gt;, OffenseAvg &lt;dbl&gt;, FirstDownPass &lt;dbl&gt;,\n#   FirstDownRush &lt;dbl&gt;, FirstDownPen &lt;dbl&gt;, FirstDownTotal &lt;dbl&gt;,\n#   Penalties &lt;dbl&gt;, PenaltyYds &lt;dbl&gt;, Fumbles &lt;dbl&gt;, Interceptions &lt;dbl&gt;,\n#   TotalTurnovers &lt;dbl&gt;, TeamFull &lt;chr&gt;, TeamURL &lt;chr&gt;, Outcome &lt;chr&gt;, …\n\n\nCode\nbigten24 |&gt; group_by(OffensivePlays)\n\n\n# A tibble: 96 × 54\n# Groups:   OffensivePlays [35]\n    Game Date       HomeAway Opponent    Result PassingCmp PassingAtt PassingPct\n   &lt;dbl&gt; &lt;date&gt;     &lt;chr&gt;    &lt;chr&gt;       &lt;chr&gt;       &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;\n 1     1 2024-08-31 &lt;NA&gt;     Florida In… W (31…         15         25       60  \n 2     2 2024-09-06 &lt;NA&gt;     Western Il… W (77…         19         21       90.5\n 3     3 2024-09-14 @        UCLA        W (42…         25         33       75.8\n 4     4 2024-09-21 &lt;NA&gt;     Charlotte   W (52…         18         27       66.7\n 5     5 2024-09-28 &lt;NA&gt;     Maryland    W (42…         22         33       66.7\n 6     6 2024-10-05 @        Northweste… W (41…         25         33       75.8\n 7     1 2024-08-31 &lt;NA&gt;     Akron       W (52…         18         31       58.1\n 8     2 2024-09-07 &lt;NA&gt;     Western Mi… W (56…         25         33       75.8\n 9     3 2024-09-21 &lt;NA&gt;     Marshall    W (49…         18         26       69.2\n10     4 2024-09-28 @        Michigan S… W (38…         26         40       65  \n# ℹ 86 more rows\n# ℹ 46 more variables: PassingYds &lt;dbl&gt;, PassingTD &lt;dbl&gt;, RushingAtt &lt;dbl&gt;,\n#   RushingYds &lt;dbl&gt;, RushingAvg &lt;dbl&gt;, RushingTD &lt;dbl&gt;, OffensivePlays &lt;dbl&gt;,\n#   OffensiveYards &lt;dbl&gt;, OffenseAvg &lt;dbl&gt;, FirstDownPass &lt;dbl&gt;,\n#   FirstDownRush &lt;dbl&gt;, FirstDownPen &lt;dbl&gt;, FirstDownTotal &lt;dbl&gt;,\n#   Penalties &lt;dbl&gt;, PenaltyYds &lt;dbl&gt;, Fumbles &lt;dbl&gt;, Interceptions &lt;dbl&gt;,\n#   TotalTurnovers &lt;dbl&gt;, TeamFull &lt;chr&gt;, TeamURL &lt;chr&gt;, Outcome &lt;chr&gt;, …\n\n\n\n\nCode\nbigten23 |&gt; group_by(TeamFull)|&gt;\n    summarise(mean_offensive_plays = mean(OffensivePlays, na.rm = TRUE))\n\n\n# A tibble: 14 × 2\n   TeamFull                 mean_offensive_plays\n   &lt;chr&gt;                                   &lt;dbl&gt;\n 1 Illinois Fighting Illini                 67.6\n 2 Indiana Hoosiers                         66.7\n 3 Iowa Hawkeyes                            59.6\n 4 Maryland Terrapins                       66  \n 5 Michigan State Spartans                  62.4\n 6 Michigan Wolverines                      61.6\n 7 Minnesota Golden Gophers                 62.8\n 8 Nebraska Cornhuskers                     61.6\n 9 Northwestern Wildcats                    65.2\n10 Ohio State Buckeyes                      63.9\n11 Penn State Nittany Lions                 71.4\n12 Purdue Boilermakers                      71.2\n13 Rutgers Scarlet Knights                  62.4\n14 Wisconsin Badgers                        71  \n\n\nThis data reveals the total amount of offensive plays for each Big Ten team in 2023. Let’s see how it was in 2024. Then, let’s see the averages.\n\n\nCode\nbigten24 |&gt; group_by(TeamFull)|&gt;\n    summarise(mean_offensive_plays = mean(OffensivePlays, na.rm = TRUE))\n\n\n# A tibble: 18 × 2\n   TeamFull                 mean_offensive_plays\n   &lt;chr&gt;                                   &lt;dbl&gt;\n 1 Illinois Fighting Illini                 62.2\n 2 Indiana Hoosiers                         67.7\n 3 Iowa Hawkeyes                            63.8\n 4 Maryland Terrapins                       72.6\n 5 Michigan State Spartans                  60.5\n 6 Michigan Wolverines                      60  \n 7 Minnesota Golden Gophers                 61.3\n 8 Nebraska Cornhuskers                     65.5\n 9 Northwestern Wildcats                    62.8\n10 Ohio State Buckeyes                      66.6\n11 Oregon Ducks                             70.4\n12 Penn State Nittany Lions                 63.4\n13 Purdue Boilermakers                      53.2\n14 Rutgers Scarlet Knights                  68  \n15 UCLA Bruins                              54.6\n16 USC Trojans                              71.8\n17 Washington Huskies                       65.5\n18 Wisconsin Badgers                        69.2\n\n\n\n\nCode\nmean_offensive_plays_bigten24 &lt;- bigten24 |&gt; \n  group_by(TeamFull) |&gt; \n  summarise(mean_offensive_plays = mean(OffensivePlays, na.rm = TRUE))\n\n\nmean_offensive_plays_bigten23 &lt;- bigten23 |&gt; \n  group_by(TeamFull) |&gt; \n  summarise(mean_offensive_plays = mean(OffensivePlays, na.rm = TRUE))\n\n\nNow we have the averages from 2024. Are there differences? What do we notice? Let’s calculate the total mean for each season with all the teams combined.\n\n\nCode\nmean_24 &lt;- bigten24 |&gt; \n  summarise(total_mean = mean(OffensivePlays, na.rm = TRUE))\n\n\n\n\nCode\nmean_23 &lt;- bigten23 |&gt; \n  summarise(total_mean = mean(OffensivePlays, na.rm = TRUE))\n\n\nAs revealed by the code, the mean average of offensive plays in 2023 was 65.14. In 2024, that mean is 64.33. So basically, not a big difference. Let’s create bar charts for this information.\n\n\nCode\nggplot() + \n  geom_bar(\n    data = mean_offensive_plays_bigten23, \n    aes(\n      x = reorder(TeamFull, -mean_offensive_plays), \n      weight = mean_offensive_plays\n    )\n  ) +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot() + \n  geom_bar(\n    data = mean_offensive_plays_bigten24, \n    aes(\n      x = reorder(TeamFull, -mean_offensive_plays), \n      weight = mean_offensive_plays\n    )\n  ) +\n  coord_flip()\n\n\n\n\n\n\n\n\n\nAfter creating both the bar charts, we see some big changes from certain schools between 2023 and 2024 for the average number of plays. In 2023, Purdue ran the second most amount of plays on average in the conference. However, in 2024, the Boilermakers drop to last in the Big Ten for plays ran. Also, the introduction of Oregon and USC sees them already around the top for plays ran. Maryland leads the conference in 2024 for average plays ran with 72.6. Also, 2024 reveals that all but 2 teams average at least 60 offensive plays a game. In 2023, Iowa was the only team to fall under that mark. Although there are new rules with clock stoppages, it hasn’t caused a large effect on how many offensive plays team’s in the Big Ten run each game."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Strober’s SportsBlog",
    "section": "",
    "text": "Wizards lineup tendencies reveal commitment to developing youth\n\n\n\n\n\n\nlowercaseword\n\n\nlowercaseword\n\n\nlowercaseword\n\n\n\n\n\n\n\n\n\nNov 20, 2024\n\n\nBen Strober\n\n\n\n\n\n\n\n\n\n\n\n\nTerps Historic Start Reveals Trends of Good Kevin Willard Teams\n\n\n\n\n\n\nlowercaseword\n\n\nlowercaseword\n\n\nlowercaseword\n\n\n\n\n\n\n\n\n\nNov 12, 2024\n\n\nBen Strober\n\n\n\n\n\n\n\n\n\n\n\n\nDerik Queen’s Debut Points Terps Toward the Right Direction\n\n\n\n\n\n\nlowercaseword\n\n\nlowercaseword\n\n\nlowercaseword\n\n\n\n\n\n\n\n\n\nNov 7, 2024\n\n\nBen Strober\n\n\n\n\n\n\n\n\n\n\n\n\nBlaming Billy? Blame Maryland’s Inability to run the Ball.\n\n\n\n\n\n\nlowercaseword\n\n\nlowercaseword\n\n\nlowercaseword\n\n\n\n\n\n\n\n\n\nNov 6, 2024\n\n\nBen Strober\n\n\n\n\n\n\n\n\n\n\n\n\nBlaming Billy? Blame Maryland’s Inability to run the Ball.\n\n\n\n\n\n\nlowercaseword\n\n\nlowercaseword\n\n\nlowercaseword\n\n\n\n\n\n\n\n\n\nNov 6, 2024\n\n\nBen Strober\n\n\n\n\n\n\n\n\n\n\n\n\nServing looks better for Maryland in 2024. The standings don’t.\n\n\n\n\n\n\nlowercaseword\n\n\nlowercaseword\n\n\nlowercaseword\n\n\n\n\n\n\n\n\n\nOct 24, 2024\n\n\nBen Strober\n\n\n\n\n\n\n\n\n\n\n\n\nDefensive Regression Haults Maryland football’s Progression\n\n\n\n\n\n\nlowercaseword\n\n\nlowercaseword\n\n\nlowercaseword\n\n\n\n\n\n\n\n\n\nOct 23, 2024\n\n\nBen Strober\n\n\n\n\n\n\n\n\n\n\n\n\nMichigan’s Big Ten Title win is one of the Strangest Blowouts you’ll ever see\n\n\n\n\n\n\nlowercaseword\n\n\nlowercaseword\n\n\nlowercaseword\n\n\n\n\n\n\n\n\n\nOct 22, 2024\n\n\nBen Strober\n\n\n\n\n\n\n\n\n\n\n\n\nMaryland’s infamous 3rd and 6 run: Was it really that strange?\n\n\n\n\n\n\nlowercaseword\n\n\nlowercaseword\n\n\nlowercaseword\n\n\n\n\n\n\n\n\n\nOct 15, 2024\n\n\nBen Strober\n\n\n\n\n\n\n\n\n\n\n\n\nMaryland dominates the Big Ten in aces. Why not the win column?\n\n\n\n\n\n\nlowercaseword\n\n\nlowercaseword\n\n\nlowercaseword\n\n\n\n\n\n\n\n\n\nOct 10, 2024\n\n\nBen Strober\n\n\n\n\n\n\n\n\n\n\n\n\nDespite changes to clock stoppage, Big Ten teams see similar amount of offensive plays\n\n\n\n\n\n\nlowercaseword\n\n\nlowercaseword\n\n\nlowercaseword\n\n\n\n\n\n\n\n\n\nOct 8, 2024\n\n\nBen Strober\n\n\n\n\n\n\n\n\n\n\n\n\nBig Ten Plays\n\n\n\n\n\n\nlowercaseword\n\n\nlowercaseword\n\n\nlowercaseword\n\n\n\n\n\n\n\n\n\nOct 8, 2024\n\n\nBen Strober\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nOct 1, 2024\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nSep 28, 2024\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/aces-match/index.html",
    "href": "posts/aces-match/index.html",
    "title": "Serving looks better for Maryland in 2024. The standings don’t.",
    "section": "",
    "text": "Code\nsuppressPackageStartupMessages(library(tidyverse))\nlibrary(janitor)\n\n\n\nAttaching package: 'janitor'\n\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n\n\nCode\nlibrary(ggbeeswarm)\nlibrary(ggrepel)\n\n\n\n\nCode\nset.seed(1234)\n\n\n\n\nCode\nlogs &lt;- read_csv(\"https://raw.githubusercontent.com/dwillis/NCAAWomensVolleyballData/main/data/ncaa_womens_volleyball_playerstats_2023.csv\", show_col_types = FALSE)\n\n\nactiveplayers &lt;- logs |&gt; filter(mp&gt;20, !is.na(aces))\n\n\nactiveplayers &lt;- activeplayers |&gt; mutate(acespm=aces/mp)\n\nsummary(activeplayers$acespm)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.0000  0.1333  0.5323  0.5544  0.8621  2.3448 \n\n\nCode\nacers &lt;- activeplayers |&gt; filter(acespm &gt; 0.8621)\n\n\numd &lt;- activeplayers |&gt; \n  filter(team == \"Maryland Terrapins, Terps\") |&gt; \n  filter(acespm&gt;0.8621) |&gt; \n  arrange(desc(acespm))\n\n\n\nggplot() + \n  geom_beeswarm(\n    data=acers, \n    groupOnX=TRUE, \n    aes(x=pos, y=acespm), color=\"grey\") + \n  geom_beeswarm(\n    data=umd, \n    groupOnX=TRUE, \n    aes(x=pos, y=acespm), color=\"red\")+\n   geom_text(\n    data=umd, \n    aes(x=pos, y=acespm, label=full_name)) +\nlabs(title = \"Maryland fixed its 2023 serving issue. The team still has an issue winning\", subtitle = \"Samantha Schnitta has been phenomenal, but the team hasn't won much in conference.\", caption = \"By Ben Strober\")\n\n\n\n\n\n\n\n\n\nMaryland is 1-7 in Big Ten play this year, which is certainly a step back. This comes as a slight surprise given the teams vast improvement serving the ball. In 2023, Maryland lacked an identity in the serving department, as its top servers sat around the bottom compared to the rest of the NCAA’s qualified servers.\nAlthough the addition of Samantha Schnitta to the service line has sparked a massive change in the team’s ace department, the squad has regressed enough in other areas to outweigh it.\nIn 2023, Maryland only had one play over 1 ace per match, which is a massive shortcoming as revealed by the chart. Erin Engel, who served as the team’s specialist, transferred to Florida last spring. This left Maryland’s serving game in question at the time, but 2024 has looked much different.\nSchnitta’s 0.83 aces per set is the best in the entire nation. That mean’s the team should be doing a lot better, right? Wrong. Through the first 8 games of Big Ten play, Maryland has just one win. In 2023, the team had 3 at the time, including a win over #16 Minnesota.\nDespite major improvements from Adam Hughes’ team at the service line, the Terps haven’t been able to put it together in enough departments to increase the win total.\nEND\nNarration:\nAfter discovering the third quartile for aces per match as the measuring stick, Maryland only had 3 players qualify among everyone in the NCAA.\nAs revealed, Maryland only had one player average over an ace per match, which was more or less close the the bottom compared to most teams.\nThe beeswarm also reveals by position where teams get its ace production from and Maryland was well below average for OH’s, which is where most teams appear to have its leaders.\nFor discovering acers: The data set went from 3226 players who are actually active, to jus 799 players who qualified as an “acer.”"
  },
  {
    "objectID": "posts/close-rushing-wins/rushing.html",
    "href": "posts/close-rushing-wins/rushing.html",
    "title": "Michigan’s Big Ten Title win is one of the Strangest Blowouts you’ll ever see",
    "section": "",
    "text": "Maryland football somehow won on Saturday despite only 56 rushing yards. How often does this happen? Is this remotely close to a sustainable way to win games? Spoiler alert, it’s not.\nA phenomenal program such as Michigan will tell you this isn’t a sustainable method. However, Michigan’s 2023 undefeated title run has an incredible anomaly to look at.\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(ggplot2)\n\n\n\n\nCode\nLogs &lt;- read.csv(\"https://dwillis.github.io/sports-data-files/footballlogs1124.csv\")\n\n\n\n\nCode\nwinlosslogs &lt;- Logs |&gt;\n  mutate(\n    wins = case_when(\n      grepl(\"W\", Outcome) ~ 1,  \n      grepl(\"L\", Outcome) ~ 0   \n    )\n  )\n  \nhead(winlosslogs)\n\n\n  Game       Date HomeAway  Opponent    Result PassingCmp PassingAtt PassingPct\n1    1 2011-09-03     &lt;NA&gt; Louisiana W (61-34)         28         43       65.1\n2    2 2011-09-08     &lt;NA&gt;   Arizona W (37-14)         42         53       79.2\n3    3 2011-09-17        @     Tulsa W (59-33)         29         40       72.5\n4    4 2011-09-24        @ Texas A&M W (30-29)         47         60       78.3\n5    5 2011-10-08     &lt;NA&gt;    Kansas W (70-28)         38         49       77.6\n6    6 2011-10-15        @     Texas W (38-26)         23         41       56.1\n  PassingYds PassingTD RushingAtt RushingYds RushingAvg RushingTD\n1        458         4         44        208        4.7         3\n2        397         2         31        197        6.4         3\n3        369         3         48        174        3.6         4\n4        438         2         35         46        1.3         1\n5        494         7         27        106        3.9         3\n6        218         1         27        202        7.5         3\n  OffensivePlays OffensiveYards OffenseAvg FirstDownPass FirstDownRush\n1             87            666        7.7            21            10\n2             84            594        7.1            17             8\n3             88            543        6.2            18            13\n4             95            484        5.1            22             8\n5             76            600        7.9            19             6\n6             68            420        6.2            12             8\n  FirstDownPen FirstDownTotal Penalties PenaltyYds Fumbles Interceptions\n1            0             31         7         80       0             3\n2            0             25        10         90       0             1\n3            1             32         5         50       0             2\n4            3             33        11         95       1             0\n5            2             27         5         35       0             0\n6            1             21         2         20       1             0\n  TotalTurnovers               TeamFull                               TeamURL\n1              3 Oklahoma State Cowboys /cfb/schools/oklahoma-state/2011.html\n2              1 Oklahoma State Cowboys /cfb/schools/oklahoma-state/2011.html\n3              2 Oklahoma State Cowboys /cfb/schools/oklahoma-state/2011.html\n4              1 Oklahoma State Cowboys /cfb/schools/oklahoma-state/2011.html\n5              0 Oklahoma State Cowboys /cfb/schools/oklahoma-state/2011.html\n6              1 Oklahoma State Cowboys /cfb/schools/oklahoma-state/2011.html\n  Outcome TeamScore OpponentScore DefPassingCmp DefPassingAtt DefPassingPct\n1       W        61            34            20            37          54.1\n2       W        37            14            37            51          72.5\n3       W        59            33             8            26          30.8\n4       W        30            29            28            47          59.6\n5       W        70            28            26            37          70.3\n6       W        38            26            22            40          55.0\n  DefPassingYds DefPassingTD DefRushingAtt DefRushingYds DefRushingAvg\n1           212            0            37           108           2.9\n2           398            1            21            41           2.0\n3           117            2            59           365           6.2\n4           309            2            27           162           6.0\n5           325            2            44           153           3.5\n6           139            0            49           231           4.7\n  DefRushingTD DefPlays DefYards DefAvg DefFirstDownPass DefFirstDownRush\n1            2       74      320    4.3               10                6\n2            1       72      439    6.1               19                2\n3            2       85      482    5.7                5               21\n4            1       74      471    6.4               17                7\n5            2       81      478    5.9               15                9\n6            2       89      370    4.2                9               14\n  DefFirstDownPen DefFirstDownTotal DefPenalties DefPenaltyYds DefFumbles\n1               3                19            7            42          1\n2               0                21           11            67          1\n3               1                27            3            25          2\n4               1                25           10            82          1\n5               0                24            5            25          2\n6               1                24            3            30          1\n  DefInterceptions DefTotalTurnovers           Team        Conference Season\n1                1                 2 Oklahoma State Big 12 Conference   2011\n2                0                 1 Oklahoma State Big 12 Conference   2011\n3                4                 6 Oklahoma State Big 12 Conference   2011\n4                3                 4 Oklahoma State Big 12 Conference   2011\n5                2                 4 Oklahoma State Big 12 Conference   2011\n6                2                 3 Oklahoma State Big 12 Conference   2011\n  wins\n1    1\n2    1\n3    1\n4    1\n5    1\n6    1\n\n\n\n\nCode\nBigTenRush &lt;- winlosslogs |&gt; filter(Conference == \"Big Ten Conference\")\n\n\n\n\nCode\nmichigan &lt;- BigTenRush  |&gt; group_by(Season)|&gt; filter(TeamFull == \"Michigan Wolverines\", RushingYds &lt;100)|&gt;\n  summarise(\n    TotalGames = n(),\n    TotalWins = sum(wins),\n    TotalLosses = TotalGames - TotalWins,\n    winpct = TotalWins/TotalGames,\n    PassYPG = sum(PassingYds)/TotalGames\n    \n  )\n\n\n\n\nCode\nggplot(michigan, aes(x = Season)) +\n  geom_line(aes(y = TotalWins, color = \"Total Wins\"), size = 1.2) +  # Line for wins\n  geom_line(aes(y = TotalLosses, color = \"Total Losses\"), size = 1.2) +  # Line for losses\n  geom_point(data = subset(michigan, Season == 2023), aes(y = TotalWins), color = \"blue\", size = 4) + # Highlight 2023 wins\n  geom_point(data = subset(michigan, Season == 2023), aes(y = TotalLosses), color = \"red\", size = 4) + # Highlight 2023 losses\n  scale_color_manual(values = c(\"Total Wins\" = \"green\", \"Total Losses\" = \"orange\")) +\n  scale_x_continuous(breaks = seq(2011, 2024, 1)) +  # Ensure each year from 2013 to 2024 is labeled\n  labs(\n    title = \"Michigan Wolverines under 100 Rsh Yd 2011-2024\",\n    subtitle = \"Seasons: 2013-2024 (Highlight on 2023)\",\n    x = \"Season\",\n    y = \"Wins\",\n    color = \"Legend\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0.5),\n    plot.subtitle = element_text(hjust = 0.5)\n  )\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n\nPretty simple to see that since 2011, Michigan has not won often when its rushed for under 100 yards. The record to be exact in that span is 6-25.\n2023 is crazy in this data. In the one game they had under 100 rushing yards, they only threw for 147 yards that game. “How did they even win that game?” You might be thinking that right now.\nIt gets weirder.\n2023 is highlighted in this chart because it’s the year Michigan rode an undefeated season to a national title. That team was dominant, so to see them have a game under 100 rushing yards seems strange. Obviously, they won the game. However, the score? It’s probably not what you’d expect given the low offensive output.\nThat game was a 26-0 win over Iowa in the Big Ten Championship, which is played at an indoor stadium. Blake Corum had 2 TDs on just 52 yards and 15 carries. Historically, Michigan has been bad when under 100 rushing yards, so winning in a blowout is remarkable.\nLet’s explore more into teams rushing under 100 yards to reveal why this score is so bizzare.\n\n\nCode\nunique(Logs$Outcome)\n\n\n[1] \"W\" \"L\"\n\n\n\n\nCode\ngames &lt;- Logs |&gt;\n  group_by(Season)|&gt;\n  summarise(\n    games = n()\n  )\n\n\nHere is a look at outcomes from all teams in NCAA. In 1069 games since 2011, teams with under rushing yards actually won.\nLet’s break it down further and get a percentage to see how often this happens.\n\n\nCode\nrushunder100 &lt;- winlosslogs |&gt; \n  filter(RushingYds &lt; 100)\n\n\n\n\nCode\nwin_percentage_under100 &lt;- rushunder100 |&gt;\n  summarise(\n    TotalGames = n(), \n    TotalWins = sum(Outcome == \"W\"), \n    WinPercentage = (TotalWins / TotalGames) * 100  \n  )\n\n\nprint(win_percentage_under100)\n\n\n  TotalGames TotalWins WinPercentage\n1       5034      1069       21.2356\n\n\nTeams rushing for under 100 rushing yards have only won 21% of the time since 2011. Running the ball isn’t always everythingm but such a minimal rushing attack doesn’t equal a lot of wins.\nLet’s study the Big Ten specifically because of Michigan.\n\n\nCode\nBigTenRush |&gt; group_by (TeamFull)|&gt;\n  filter(RushingYds &lt; 100) |&gt;\n  summarise(\n     TotalGames = n(),\n    TotalWins = sum(wins),\n    TotalLosses = TotalGames - TotalWins,\n    winpct = TotalWins/TotalGames) |&gt;\n  \n  arrange(desc(winpct))\n\n\n# A tibble: 16 × 5\n   TeamFull                 TotalGames TotalWins TotalLosses winpct\n   &lt;chr&gt;                         &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;  &lt;dbl&gt;\n 1 Ohio State Buckeyes              12         6           6 0.5   \n 2 Penn State Nittany Lions         44        21          23 0.477 \n 3 USC Trojans                       3         1           2 0.333 \n 4 Michigan State Spartans          49        15          34 0.306 \n 5 Northwestern Wildcats            52        15          37 0.288 \n 6 UCLA Bruins                       7         2           5 0.286 \n 7 Iowa Hawkeyes                    48        12          36 0.25  \n 8 Minnesota Golden Gophers         33         7          26 0.212 \n 9 Nebraska Cornhuskers             25         5          20 0.2   \n10 Michigan Wolverines              31         6          25 0.194 \n11 Illinois Fighting Illini         48         9          39 0.188 \n12 Purdue Boilermakers              74        13          61 0.176 \n13 Maryland Terrapins               37         5          32 0.135 \n14 Indiana Hoosiers                 50         6          44 0.12  \n15 Rutgers Scarlet Knights          37         2          35 0.0541\n16 Wisconsin Badgers                21         1          20 0.0476\n\n\nAs shown in the data, Ohio State is the only team to even reach .500 winning percentage when rushing for under 100 yards in a contest. Generally teams are really really bad in these kinds of games. Also, the amount of times a team has even had a game with under 100 rushing yards tells you a lot about the program.\nMichigan’s had it happen 31 times, with that aforementioned 6-25 record, so that’s interesting given how good they’ve been over the years.\nLet’s explore more. It’s important we look at passing data also to see if Michigan passed well in these games.\n\n\nCode\n    michigan &lt;- BigTenRush  |&gt; group_by(Season)|&gt; filter(TeamFull == \"Michigan Wolverines\", RushingYds &lt;100)|&gt;\n  summarise(\n    TotalGames = n(),\n    TotalWins = sum(wins),\n    TotalLosses = TotalGames - TotalWins,\n    winpct = TotalWins/TotalGames,\n    PassYPG = sum(PassingYds)/TotalGames\n    \n  )\n\n\nNot to surprising to see the averaging passing yards per game were also low in these losses. Bad Offensive usually = losses.\nIn 13 years of plays where the team has had games of under 100 rushing yards, the team only had a record over .500 in those games one season in 2023. Figures they only had 1 game under 100 rush yds in their National Championship year. They ran the ball really well that season. That 1 game is still just absurd.\nOverall, rushing the ball for over 100 yards is pretty important toward winning games, and the best teams historically are an example of that. With all this data revealed, it makes Michigan’s 26-0 win over Iowa such a strange outcome for that game.\nIs it the strangest blowout ever? You make the call."
  },
  {
    "objectID": "posts/early-season/index.html",
    "href": "posts/early-season/index.html",
    "title": "Derik Queen’s Debut Points Terps Toward the Right Direction",
    "section": "",
    "text": "Maryland basketball won its season-opener over Manhattan by a whopping 30 points. Derik Queen shined with a 20-20 game, which has people thinking, how will Maryland continue throughout the start of the year?\nA one-game sample size makes it almost impossible to tell, but it does give us a baseline idea from previous years what we might need to look for over the next few games.\nAfter one game, Maryland fans should be encouraged. Derik Queen looks like a star, and his play looks likely to elevate Maryland’s efficiency in many areas.\nLet’s look at how previous seasons started by using efficiency metrics.\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n\nCode\nlogs &lt;- read_csv(\"https://raw.githubusercontent.com/dwillis/dwillis.github.io/main/docs/sports-data-files/cbblogs1525.csv\")\n\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\nRows: 109585 Columns: 51\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (9): Season, TeamFull, Opponent, HomeAway, W_L, URL, Conference, Team,...\ndbl  (39): Game, TeamScore, OpponentScore, TeamFG, TeamFGA, TeamFGPCT, Team3...\nlgl   (2): Blank, season\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nCode\nmaryland_data &lt;- logs |&gt;\n  filter(Team == \"Maryland\")\n\n\nGiven that a season is on average 35-40 games, depending on postseason. I decided to say that 7 games is about what I’d consider the early season.\n\n\nCode\nmaryland_first_7 &lt;- maryland_data |&gt;\n  filter(Game &lt;8) \n\n\n\n\nCode\nmaryland_mutated &lt;- maryland_first_7 |&gt;  mutate(\n  Differential = TeamScore - OpponentScore,\n    Team3PtPct = Team3P / Team3PA * 100,\n    Opponent3PtPct = Opponent3P / Opponent3PA * 100,\n    TeamFGPct = TeamFG / TeamFGA * 100,\n    OpponentFGPct = OpponentFG / OpponentFGA * 100\n  ) \n\n stats_7 &lt;- maryland_mutated |&gt;\n  group_by (Season)|&gt;\n  summarise(\n    FGAvg = mean(TeamFGPCT),\n    OppFGAvg = mean(OpponentFGPCT),\n    threePtPct = mean(Team3PPCT),\n    Ptdiff =mean(Differential),\n    Opp3ptPct =mean (Opponent3PPCT),\n    TO = mean(TeamTurnovers),\n    OppTO= mean(OpponentTurnovers),\n    TeamOffRebounds = mean (TeamOffRebounds),\n    OpponentOffRebounds = mean (OpponentOffRebounds)\n    \n    \n  )\n\n\nprint(maryland_data)\n\n\n# A tibble: 297 × 51\n   Season     Game Date       TeamFull         Opponent HomeAway W_L   TeamScore\n   &lt;chr&gt;     &lt;dbl&gt; &lt;date&gt;     &lt;chr&gt;            &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt;     &lt;dbl&gt;\n 1 2022-2023     1 2022-11-07 Maryland Terrap… Niagara  &lt;NA&gt;     W            71\n 2 2022-2023     2 2022-11-10 Maryland Terrap… Western… &lt;NA&gt;     W            71\n 3 2022-2023     3 2022-11-15 Maryland Terrap… Bingham… &lt;NA&gt;     W            76\n 4 2022-2023     4 2022-11-19 Maryland Terrap… Saint L… N        W            95\n 5 2022-2023     5 2022-11-20 Maryland Terrap… Miami (… N        W            88\n 6 2022-2023     6 2022-11-25 Maryland Terrap… Coppin … &lt;NA&gt;     W            95\n 7 2022-2023     7 2022-11-29 Maryland Terrap… Louisvi… @        W            79\n 8 2022-2023     8 2022-12-02 Maryland Terrap… Illinois &lt;NA&gt;     W            71\n 9 2022-2023     9 2022-12-06 Maryland Terrap… Wiscons… @        L            59\n10 2022-2023    10 2022-12-11 Maryland Terrap… Tenness… N        L            53\n# ℹ 287 more rows\n# ℹ 43 more variables: OpponentScore &lt;dbl&gt;, TeamFG &lt;dbl&gt;, TeamFGA &lt;dbl&gt;,\n#   TeamFGPCT &lt;dbl&gt;, Team3P &lt;dbl&gt;, Team3PA &lt;dbl&gt;, Team3PPCT &lt;dbl&gt;,\n#   TeamFT &lt;dbl&gt;, TeamFTA &lt;dbl&gt;, TeamFTPCT &lt;dbl&gt;, TeamOffRebounds &lt;dbl&gt;,\n#   TeamTotalRebounds &lt;dbl&gt;, TeamAssists &lt;dbl&gt;, TeamSteals &lt;dbl&gt;,\n#   TeamBlocks &lt;dbl&gt;, TeamTurnovers &lt;dbl&gt;, TeamPersonalFouls &lt;dbl&gt;,\n#   OpponentFG &lt;dbl&gt;, OpponentFGA &lt;dbl&gt;, OpponentFGPCT &lt;dbl&gt;, …\n\n\nNow let’s take these stats through the first 7 games, and put them in our efficiency formula.\n\n\nCode\nstats_efficiency &lt;- stats_7 |&gt;\n  group_by(Season) |&gt;\n  summarise(\n    FGAvg = mean(FGAvg, na.rm = TRUE),\n    OppFGAvg = mean(OppFGAvg, na.rm = TRUE),\n    ThreePtPct = mean(threePtPct, na.rm = TRUE),\n    Opp3PtPct = mean(Opp3ptPct, na.rm = TRUE),\n    PtDiff = mean(Ptdiff, na.rm = TRUE),\n    TO = mean (TO, na.rm = TRUE),\n    OppTO = mean (OppTO, na.rm = TRUE),\n    TeamOffRebounds = mean (TeamOffRebounds, na.rm = TRUE),\n    OpponentOffRebounds = mean(OpponentOffRebounds, na.rm = TRUE)\n  ) |&gt;\n  mutate(\n    OffensiveEfficiency = (FGAvg + ThreePtPct + TO + TeamOffRebounds) / 2,\n    DefensiveEfficiency = (OppFGAvg + Opp3PtPct + OppTO + OpponentOffRebounds) / 2,\n     EfficiencyDifferential = (OffensiveEfficiency - DefensiveEfficiency) + PtDiff\n  )\n\n\nNow let’s visualize Maryland’s efficicency rate over the years through the first 7 games.\n\n\nCode\nggplot(stats_efficiency, aes(x = Season, y = EfficiencyDifferential)) +\n  geom_bar(stat = \"identity\", fill = \"skyblue\") +\n  labs(\n    title = \"Maryland Efficiency Differential by Season\",\n    x = \"Season\",\n    y = \"Efficiency Differential\"\n  ) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\n2021 and 2023 are really low, and that makes sense. Those teams had really poor starts to the year, and had poor years as a whole. 2021 is even crazier because Turgeon was there for only 8 games, so just our measuring stick for the early season. Based on the chart, when Maryland is around 15 or above in its Efficiency differential through 7 games, they have a pretty good season. 2017 Maryland had a blazing start but cooled down and went 8-10 in Big Ten play.\nIt’s just one game, but being over 30 is still extremely impressive, and reveals that a slight step back would see this Maryland team on brand with other tournament teams of the past.\nLet’s look at another visualization.\n\n\nCode\nggplot(stats_efficiency, aes(x = Season, y = \"Efficiency Differential\", fill = EfficiencyDifferential)) +\n  geom_tile(color = \"white\") +\n  scale_fill_gradient(low = \"lightyellow\", high = \"darkred\", name = \"Efficiency\\nDifferential\") +\n  labs(\n    title = \"Maryland's 1st game reveals good things to come\",\n    x = \"Season\",\n    y = \"\"\n  ) +\n  theme_minimal() +\n  theme(axis.text.y = element_blank(),\n        axis.ticks.y = element_blank(),\n        axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\nObviously, our 2024 data is the darkest on the heat map because it’s just one game. The other darker years shown here are 2022, 2019, 2018 and 2017. Most of those years were solid years for Maryland. One interesting thing to note is 2015-16. That team went all the way to the sweet 16, so I’m surprised their efficiency was lower through the first part of the year.\nIt’s possible to believe that 7 games in the new era of college basketball isn’t a large enough sample size becuase of teams bringing in players from the portal. When there is less continuity, it might take longer to adjust.\nMaryland fans should be encouraged. Despite not shooting well from 3 on Monday, the team performed very well in its other metrics, with rebounding looking phenomenal with Queen. Rebounding is inmportant and if Maryland can keep that up and find its stroke from beyond the arc, its in for a good season."
  },
  {
    "objectID": "posts/index.html",
    "href": "posts/index.html",
    "title": "Blaming Billy? Blame Maryland’s Inability to run the Ball.",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(ggplot2)\nlogs &lt;- read_csv(\"https://www.thescoop.org/sports-data-files/footballlogs24.csv\")\n\n\nRows: 1136 Columns: 54\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (45): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nbig_ten_data &lt;- logs |&gt;\n  mutate(GameTick = as.character(Game))|&gt;\n  filter (Conference == \"Big Ten Conference\") |&gt;\n  mutate(Month = month(Date),\n       (GameTick =as.character(Game)))|&gt;\n  group_by(Month, RushingAvg)\naverages &lt;- big_ten_data |&gt;\n  group_by(Date, TeamFull) |&gt;\n  summarise(RushingAvg = mean(RushingAvg))\n\n\n`summarise()` has grouped output by 'Date'. You can override using the\n`.groups` argument.\n\n\nCode\nbig_ten_data |&gt; summarise(mean(RushingAvg))\n\n\n`summarise()` has grouped output by 'Month'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 108 × 3\n# Groups:   Month [4]\n   Month RushingAvg `mean(RushingAvg)`\n   &lt;dbl&gt;      &lt;dbl&gt;              &lt;dbl&gt;\n 1     8        2.4                2.4\n 2     8        2.9                2.9\n 3     8        3.6                3.6\n 4     8        4.3                4.3\n 5     8        4.4                4.4\n 6     8        4.7                4.7\n 7     8        4.8                4.8\n 8     8        5.2                5.2\n 9     8        5.3                5.3\n10     8        5.4                5.4\n# ℹ 98 more rows\n\n\nCode\nggplot() + \n  geom_hline(yintercept = 4.362821, color = \"blue\") + \n  geom_line(data = big_ten_data, aes(x = GameTick, y = RushingAvg, group = TeamFull)) + \n  scale_y_continuous(limits = c(-1.5, 9)) + \n  facet_wrap(~ TeamFull) + \n  labs(title = \"Maryland hasn't lived up to 'The Standard' of Big Ten Rushing\") +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\n\n\n\n\n\n\nIt’s been a rough season for Maryland football. After brutal blowout losses to Northwestern and Minnesota, offensive struggles have become the focus of attention.\nWhile many direct blame at Maryland’s new quarterback Billy Edwards Jr., he’s not the problem. The Terps’ inability to rush the ball well compared to their Big Ten peers is why their offense has plundered.\nThe Big Ten’s rushing average per attempt is 4.36 yards. Maryland has severely struggled to reach that margin, and hasn’t done so in a single Big Ten game.\nAccording to data for all Big Ten teams rushing averages, Maryland has only rushed at the conference average in 2 games this season. Against who? Villanova and UCONN. Against every other opponent, Maryland has been a below average rushing team compared to other Big Ten opponents.\nLet’s put this into perspective with other top-tier Big Ten teams. Oregon, Penn State, Indiana and Ohio State, have all consistently been above the conference average running the football. Maryland’s next opponent is No. 1 Oregon on Saturday. Given that this match up features a very effect rushing team against one that isn’t at all, the odds are stacked against Maryland on the road.\nWhile running the ball is a good indicator of how good a team is, some teams don’t fit this narrative in the Big Ten.\nInterestingly, USC and Purdue have struggled this year, but it’s apparent rushing hasn’t been the biggest issue for those teams. Most of the data indicates teams that run the ball effectively compared to the conference average perform well.\nAnother clear piece of evidence is within UCLA’s data. UCLA, who has been one of the worst offensive teams in the Big Ten, have seen absolute futility rushing the football compared to the Big Ten Average.\nIf Maryland wants any possibility at making a fourth-straight bowl game, the rushing attacks needs a late-season resurgence."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/Third and Six/index.html",
    "href": "posts/Third and Six/index.html",
    "title": "Maryland’s infamous 3rd and 6 run: Was it really that strange?",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(dplyr)\nlibrary(cfbfastR)\nlibrary(waffle)\n\n\n\n\nCode\npbp &lt;-load_cfb_pbp(seasons = c(2019,2020,2021,2022,2023,2024))\n\n\n\n\nCode\nthird_and_six &lt;- pbp |&gt;\n  filter(down == 3, distance ==6)\n\n\n\n\nCode\nthird_and_six|&gt;\n  group_by(play_type)|&gt;\n  summarise(count = n()) \n\n\n# A tibble: 22 × 2\n   play_type                            count\n   &lt;chr&gt;                                &lt;int&gt;\n 1 Blocked Field Goal                       2\n 2 End Period                               6\n 3 End of Game                              1\n 4 Field Goal Good                         16\n 5 Field Goal Missed                        6\n 6 Fumble Recovery (Opponent)             101\n 7 Fumble Recovery (Opponent) Touchdown     1\n 8 Fumble Recovery (Own)                   76\n 9 Fumble Return Touchdown                  7\n10 Interception Return                    257\n# ℹ 12 more rows\n\n\n\n\nCode\nthird_and_six_runs &lt;- third_and_six |&gt;\n  filter(rush ==\"1\")\n\ntotal_runs &lt;- third_and_six_runs |&gt;\nsummarise(count = n()) |&gt;\n  pluck(1)\ntotal_runs/15661\n\n\n[1] 0.2163974\n\n\nTeams ran the ball about 21.6% of the time on 3rd down and 6.\n\n\nCode\nthird_and_six |&gt;\n  summarise(\n    average_yds = mean(yards_gained)\n  )\n\n\n# A tibble: 1 × 1\n  average_yds\n        &lt;dbl&gt;\n1        5.20\n\n\nTeams who ran the ball on 3rd down and 6 picked up on average 5.19 yards. Let’s hope they were in two-down territory.\n\n\nCode\nrun_counts &lt;- third_and_six_runs |&gt;\n  group_by(pos_team) |&gt;\n  summarise(total_runs = n()) |&gt;\n  arrange(desc(total_runs)) \n\n\nNavy runs the most on third and 6, which isn’t a surprise, as they’ve done it 60 times.\n\n\nCode\nthird_and_six |&gt; group_by(pos_team, year)|&gt; filter(rush == \"1\", pos_team ==\"Maryland\") |&gt;\nsummarise(\n  count = n())\n\n\n`summarise()` has grouped output by 'pos_team'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 5 × 3\n# Groups:   pos_team [1]\n  pos_team  year count\n  &lt;chr&gt;    &lt;int&gt; &lt;int&gt;\n1 Maryland  2019     1\n2 Maryland  2021     4\n3 Maryland  2022     6\n4 Maryland  2023     5\n5 Maryland  2024     1\n\n\nIn 2023, which had the infamous call on Homecoming, Maryland ran the ball on third and 6 five times. In 2024, they have only done so one time.Let’s take a visual look compare this data to an SEC team like Ole Miss.\n\n\nCode\nmd &lt;- c(\"Rush\"=17, \"Pass\"=46)\nom &lt;- c(\"Rush\"=31, \"Pass\"=55)\n\n\n\n\nCode\nthird_and_six |&gt; group_by(pos_team, year)|&gt; filter(rush == \"1\", pos_team ==\"Ole Miss\") |&gt;\nsummarise(\n  count = n())\n\n\n`summarise()` has grouped output by 'pos_team'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 6 × 3\n# Groups:   pos_team [1]\n  pos_team  year count\n  &lt;chr&gt;    &lt;int&gt; &lt;int&gt;\n1 Ole Miss  2019     6\n2 Ole Miss  2020     4\n3 Ole Miss  2021     6\n4 Ole Miss  2022     4\n5 Ole Miss  2023     8\n6 Ole Miss  2024     3\n\n\n\n\nCode\nthird_and_six |&gt; group_by(pos_team, year)|&gt; filter(pass == \"1\", pos_team ==\"Ole Miss\") |&gt;\nsummarise(\n  count = n())\n\n\n`summarise()` has grouped output by 'pos_team'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 6 × 3\n# Groups:   pos_team [1]\n  pos_team  year count\n  &lt;chr&gt;    &lt;int&gt; &lt;int&gt;\n1 Ole Miss  2019    12\n2 Ole Miss  2020     7\n3 Ole Miss  2021     7\n4 Ole Miss  2022     6\n5 Ole Miss  2023    12\n6 Ole Miss  2024    11\n\n\n\n\nCode\nthird_and_six |&gt; group_by(pos_team, year)|&gt; filter(pass == \"1\", pos_team ==\"Maryland\") |&gt;\nsummarise(\n  count = n())\n\n\n`summarise()` has grouped output by 'pos_team'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 6 × 3\n# Groups:   pos_team [1]\n  pos_team  year count\n  &lt;chr&gt;    &lt;int&gt; &lt;int&gt;\n1 Maryland  2019     4\n2 Maryland  2020    11\n3 Maryland  2021     6\n4 Maryland  2022    12\n5 Maryland  2023     7\n6 Maryland  2024     6\n\n\n\n\nCode\nwaffle(\n        md, \n        rows = 10, \n        title=\"Maryland on third and six\", \n        xlab=\"1 square = 1 yard\", \n        colors = c(\"black\", \"red\")\n)\n\n\n\n\n\n\n\n\n\nAs shown, Maryland over the past few years typically doesn’t run the ball on third and six. This seems about right, but last year featured the team do it the second most in the past 5 years, with 2022 seeing the rush called the most.\nLet’s take a look at Ole Miss compared to Maryland.\n\n\nCode\niron(\n waffle(md/2, \n        rows = 10, \n        title=\"Maryland 3rd and 6\", \n        xlab=\"1 square = 1 yard\", \n        colors = c(\"black\", \"red\")\n        ),\n waffle(om/2, \n        rows = 10, \n        title=\"Ole Miss 3rd and 6\", \n        xlab=\"1 square = 1 yard\",\n        colors = c(\"blue\", \"grey\")\n        )\n)\n\n\n\n\n\n\n\n\n\nIt was very obvious Navy, Army and Air Force would top the list of teams that run the ball on third down and six. For that reason, we didn’t include them in a visualization. When looking through teams that ran the ball on third and six the most, it was slightly surprising to see Ole Miss so high up on the list. When taking a look at the waffle, it’s evident Ole Miss has been much more run-heavy on this down and distance compared to Maryland. Ole Miss ran 31 times, compared to Maryland’s 17. Maryland has only done so once this year, which is interesting considering they have a QB that is probably a stronger runner than Taulia was. Ole Miss’ offense also features quite a bit of QB runs, so maybe that’s what inflates these 3rd and medium running plays.\nPeople were furious with Locksley after that play-call. However, this data suggest it’s not entirely weird. Of course, play-calling should be dependent on the team’s offensive scheme and personel, but seeing a team as good as Ole Miss do it this often signifies it works for some. Based on this year so far, Maryland has changed its behavior and only ran 1 time in this situation.\nWhen sifting through all the teams that are pretty high up, there is a lot of good teams that actually run the ball a lot on third and six, revealing that this play-call isn’t as absurd as people reacted."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  }
]